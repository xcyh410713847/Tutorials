<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>从零开始手敲次世代游戏引擎（十六）</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<P>
<EM>
<A href="https://zhuanlan.zhihu.com/p/28981044" target=_blank >原文链接</A>

</EM>
</P>
<P >
<EM >
  (未修改原文）</EM></P>

<P>
<EM>正文开始：</EM></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 0px 0px 1.4em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>上一篇我们将我们的图形接口从DX11升级到了DX12。但是依然只能画一个三角形。本篇我们继续完善我们的代码，让它能够绘制一个面包圈。<BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>因为目前我们还没有文件读写的模块，为了让代码尽量简洁，我们采用实时生成的方式生成我们的面包圈顶点数据。这会需要一些线性空间的计算，所以我们重新加入之前画立方体用过的数学库。同时，我们定义了一个叫SimpleMesh的类，用来存储我们生成的模型数据。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>"DirectXMath.h"</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>"Mesh.h"</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN></CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>我们还需要申请更多的堆，用来存放我们的顶点数据。我们还将使用贴图，以及进行动画。因此我们也需要为贴图（包括采样器）和动画数据（常量）申请堆。我们首先增加保存这些配置信息的全局变量。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=n>ComPtr</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>ID3D12DescriptorHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN>    <SPAN class=n>g_pDsvHeap</SPAN><SPAN class=p>;</SPAN>                         <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// an array of descriptors of GPU objects
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=n>ComPtr</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>ID3D12DescriptorHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN>    <SPAN class=n>g_pCbvSrvHeap</SPAN><SPAN class=p>;</SPAN>                      <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// an array of descriptors of GPU objects
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=n>ComPtr</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>ID3D12DescriptorHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN>    <SPAN class=n>g_pSamplerHeap</SPAN><SPAN class=p>;</SPAN>                     <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// an array of descriptors of GPU objects
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=n>ComPtr</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>ID3D12Resource</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN>          <SPAN class=n>g_pIndexBuffer</SPAN><SPAN class=p>;</SPAN>                     <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// the pointer to the vertex buffer
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=n>D3D12_INDEX_BUFFER_VIEW</SPAN>         <SPAN class=n>g_IndexBufferView</SPAN><SPAN class=p>;</SPAN>                  <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// a view of the vertex buffer
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=n>ComPtr</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>ID3D12Resource</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN>          <SPAN class=n>g_pTextureBuffer</SPAN><SPAN class=p>;</SPAN>                   <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// the pointer to the texture buffer
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=n>ComPtr</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>ID3D12Resource</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN>          <SPAN class=n>g_pDepthStencilBuffer</SPAN><SPAN class=p>;</SPAN>              <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// the pointer to the depth stencil buffer
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=n>ComPtr</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>ID3D12Resource</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN>          <SPAN class=n>g_pConstantUploadBuffer</SPAN><SPAN class=p>;</SPAN>            <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// the pointer to the depth stencil buffer
</SPAN></CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B 
style="FONT-WEIGHT: 600">创建3D模型数据</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>我们将引入光照，并根据物体表面法线进行局部光照计算。我们首先需要修改我们的顶点数据结构，使其包括法线和切线数据。同时我们要进行贴图，因此还需要位置保存贴图坐标（uv）</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>一个面包圈模型实际上是由一个绕Z轴旋转的向量和一个绕Y轴旋转的向量组合而成的。因此我们用一个双重循环来生成它。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=https%3A//en.m.wikipedia.org/wiki/Torus" 
rel="nofollow noreferrer" target=_blank  data-za-detail-view-id="1043">Torus - 
Wikipedia</A></P>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=k style="FONT-WEIGHT: 600">struct</SPAN> <SPAN class=n>SimpleMeshVertex</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=n>XMFLOAT3</SPAN>    <SPAN class=n>m_position</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>XMFLOAT3</SPAN>    <SPAN class=n>m_normal</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>XMFLOAT4</SPAN>    <SPAN class=n>m_tangent</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>XMFLOAT2</SPAN>    <SPAN class=n>m_uv</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>};</SPAN>

<SPAN class=n>SimpleMesh</SPAN> <SPAN class=n>torus</SPAN><SPAN class=p>;</SPAN>
</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-text style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>void BuildTorusMesh(
                float outerRadius, float innerRadius, 
                uint16_t outerQuads, uint16_t innerQuads, 
                float outerRepeats, float innerRepeats,
                SimpleMesh* pDestMesh) 
{
    const uint32_t outerVertices = outerQuads + 1;
    const uint32_t innerVertices = innerQuads + 1;
    const uint32_t vertices = outerVertices * innerVertices;
    const uint32_t numInnerQuadsFullStripes = 1;
    const uint32_t innerQuadsLastStripe = 0;
    const uint32_t triangles = 2 * outerQuads * innerQuads; // 2 triangles per quad

    pDestMesh-&gt;m_vertexCount            = vertices;
    pDestMesh-&gt;m_vertexStride           = sizeof(SimpleMeshVertex);
    pDestMesh-&gt;m_vertexAttributeCount   = kVertexElemCount;
    pDestMesh-&gt;m_vertexBufferSize       = pDestMesh-&gt;m_vertexCount * pDestMesh-&gt;m_vertexStride;

    pDestMesh-&gt;m_indexCount             = triangles * 3;            // 3 vertices per triangle
    pDestMesh-&gt;m_indexType              = IndexSize::kIndexSize16;  // whenever possible, use smaller index 
                                                                    // to save memory and enhance cache performance.
    pDestMesh-&gt;m_primitiveType          = PrimitiveType::kPrimitiveTypeTriList;
    pDestMesh-&gt;m_indexBufferSize        = pDestMesh-&gt;m_indexCount * sizeof(uint16_t);

    // build vertices 
    pDestMesh-&gt;m_vertexBuffer = new uint8_t[pDestMesh-&gt;m_vertexBufferSize];

    SimpleMeshVertex* outV = static_cast&lt;SimpleMeshVertex*&gt;(pDestMesh-&gt;m_vertexBuffer);
    const XMFLOAT2 textureScale = XMFLOAT2(outerRepeats / (outerVertices - 1.0f), innerRepeats / (innerVertices - 1.0f));
    for (uint32_t o = 0; o &lt; outerVertices; ++o)
    {
        const float outerTheta = o * 2 * XM_PI / (outerVertices - 1);
        const XMMATRIX outerToWorld = XMMatrixTranslation(outerRadius, 0, 0) * XMMatrixRotationZ(outerTheta);

        for (uint32_t i = 0; i &lt; innerVertices; ++i)
        {
            const float innerTheta = i * 2 * XM_PI / (innerVertices - 1);
            const XMMATRIX innerToOuter = XMMatrixTranslation(innerRadius, 0, 0) * XMMatrixRotationY(innerTheta);
            const XMMATRIX localToWorld = innerToOuter * outerToWorld;
            XMVECTOR v = XMVectorSet(0.0f, 0.0f, 0.0f, 1.0f);
            v = XMVector4Transform(v, localToWorld);
            XMStoreFloat3(&amp;outV-&gt;m_position, v);
            v = XMVectorSet(1.0f, 0.0f, 0.0f, 0.0f);
            v = XMVector4Transform(v, localToWorld);
            XMStoreFloat3(&amp;outV-&gt;m_normal, v);
            v = XMVectorSet(0.0f, 1.0f, 0.0f, 0.0f);
            v = XMVector4Transform(v, localToWorld);
            XMStoreFloat4(&amp;outV-&gt;m_tangent, v);
            outV-&gt;m_uv.x = o * textureScale.x;
            outV-&gt;m_uv.y = i * textureScale.y;
            ++outV;
        }
    }

    // build indices
    pDestMesh-&gt;m_indexBuffer = new uint8_t[pDestMesh-&gt;m_indexBufferSize];

    uint16_t* outI = static_cast&lt;uint16_t*&gt;(pDestMesh-&gt;m_indexBuffer);
    uint16_t const numInnerQuadsStripes = numInnerQuadsFullStripes + (innerQuadsLastStripe &gt; 0 ? 1 : 0);
    for (uint16_t iStripe = 0; iStripe &lt; numInnerQuadsStripes; ++iStripe)
    {
        uint16_t const innerVertex0 = iStripe * innerQuads;

        for (uint16_t o = 0; o &lt; outerQuads; ++o)
        {
            for (uint16_t i = 0; i &lt; innerQuads; ++i)
            {
                const uint16_t index[4] = {
                    static_cast&lt;uint16_t&gt;((o + 0) * innerVertices + innerVertex0 + (i + 0)),
                    static_cast&lt;uint16_t&gt;((o + 0) * innerVertices + innerVertex0 + (i + 1)),
                    static_cast&lt;uint16_t&gt;((o + 1) * innerVertices + innerVertex0 + (i + 0)),
                    static_cast&lt;uint16_t&gt;((o + 1) * innerVertices + innerVertex0 + (i + 1)),
                };
                outI[0] = index[0];
                outI[1] = index[2];
                outI[2] = index[1];
                outI[3] = index[1];
                outI[4] = index[2];
                outI[5] = index[3];
                outI += 6;
            }
        }
    }
}</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>接下来，我们需要通知GPU我们全新的顶点数据结构。这是靠更新相关的DESCRIPTOR来实现的。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-text style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>// create the input layout object
    D3D12_INPUT_ELEMENT_DESC ied[] =
    {
        {"POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0},
        {"NORMAL", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 12, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0},
        {"TANGENT", 0, DXGI_FORMAT_R32G32B32A32_FLOAT, 0, 24, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0},
        {"TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0, 40, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0},
    };</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>我们还需要在我们申请的堆当中分出一块缓冲区，用来将顶点索引数据传给GPU。在DX12当中，这些缓冲区的创建过程都是极为类似的。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// create index buffer
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=p>{</SPAN>
       <SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateCommittedResource</SPAN><SPAN class=p>(</SPAN>
           <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_HEAP_PROPERTIES</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_HEAP_TYPE_DEFAULT</SPAN><SPAN class=p>),</SPAN>
           <SPAN class=n>D3D12_HEAP_FLAG_NONE</SPAN><SPAN class=p>,</SPAN>
           <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_RESOURCE_DESC</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Buffer</SPAN><SPAN class=p>(</SPAN><SPAN class=n>torus</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_indexBufferSize</SPAN><SPAN class=p>),</SPAN>
           <SPAN class=n>D3D12_RESOURCE_STATE_COPY_DEST</SPAN><SPAN class=p>,</SPAN>
           <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN>
           <SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pIndexBuffer</SPAN><SPAN class=p>)));</SPAN>
    
       <SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateCommittedResource</SPAN><SPAN class=p>(</SPAN>
           <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_HEAP_PROPERTIES</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_HEAP_TYPE_UPLOAD</SPAN><SPAN class=p>),</SPAN>
           <SPAN class=n>D3D12_HEAP_FLAG_NONE</SPAN><SPAN class=p>,</SPAN>
           <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_RESOURCE_DESC</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Buffer</SPAN><SPAN class=p>(</SPAN><SPAN class=n>torus</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_indexBufferSize</SPAN><SPAN class=p>),</SPAN>
           <SPAN class=n>D3D12_RESOURCE_STATE_GENERIC_READ</SPAN><SPAN class=p>,</SPAN>
           <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN>
           <SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>pIndexBufferUploadHeap</SPAN><SPAN class=p>)));</SPAN>
    
       <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Copy data to the intermediate upload heap and then schedule a copy 
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>       <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// from the upload heap to the vertex buffer.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>       <SPAN class=n>D3D12_SUBRESOURCE_DATA</SPAN> <SPAN class=n>indexData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
       <SPAN class=n>indexData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>pData</SPAN>      <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>torus</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_indexBuffer</SPAN><SPAN class=p>;</SPAN>
       <SPAN class=n>indexData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>RowPitch</SPAN>   <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>torus</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_indexType</SPAN><SPAN class=p>;</SPAN>
       <SPAN class=n>indexData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>SlicePitch</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>indexData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>RowPitch</SPAN><SPAN class=p>;</SPAN>
    
       <SPAN class=n>UpdateSubresources</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pCommandList</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>g_pIndexBuffer</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>pIndexBufferUploadHeap</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>indexData</SPAN><SPAN class=p>);</SPAN>
       <SPAN class=n>g_pCommandList</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>ResourceBarrier</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> 
                       <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_RESOURCE_BARRIER</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Transition</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pIndexBuffer</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN>
                               <SPAN class=n>D3D12_RESOURCE_STATE_COPY_DEST</SPAN><SPAN class=p>,</SPAN>
                               <SPAN class=n>D3D12_RESOURCE_STATE_INDEX_BUFFER</SPAN><SPAN class=p>));</SPAN>
    
       <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// initialize the vertex buffer view
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>       <SPAN class=n>g_IndexBufferView</SPAN><SPAN class=p>.</SPAN><SPAN class=n>BufferLocation</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>g_pIndexBuffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetGPUVirtualAddress</SPAN><SPAN class=p>();</SPAN>
       <SPAN class=n>g_IndexBufferView</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Format</SPAN>         <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>DXGI_FORMAT_R16_UINT</SPAN><SPAN class=p>;</SPAN>
       <SPAN class=n>g_IndexBufferView</SPAN><SPAN class=p>.</SPAN><SPAN class=n>SizeInBytes</SPAN>    <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>torus</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_indexBufferSize</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=p>}</SPAN>

</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>最后，我们需要在录制绘图指令的时候，告诉GPU我们的顶点索引数据缓存区的地址。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=n>g_pCommandList</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>IASetIndexBuffer</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_IndexBufferView</SPAN><SPAN class=p>);</SPAN>

</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B 
style="FONT-WEIGHT: 600">创建常量</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>为了让我们的模型动起来，我们需要创建常量，也就是MVP矩阵，以及光照数据。我们首先定义常量的结构。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=k style="FONT-WEIGHT: 600">struct</SPAN> <SPAN class=n>SimpleConstants</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=n>XMFLOAT4X4</SPAN>  <SPAN class=n>m_modelView</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>XMFLOAT4X4</SPAN>  <SPAN class=n>m_modelViewProjection</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>XMFLOAT4</SPAN>    <SPAN class=n>m_lightPosition</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>XMFLOAT4</SPAN>    <SPAN class=n>m_lightColor</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>XMFLOAT4</SPAN>    <SPAN class=n>m_ambientColor</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>XMFLOAT4</SPAN>    <SPAN class=n>m_lightAttenuation</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>};</SPAN>

<SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN>    <SPAN class=n>g_pCbvDataBegin</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>;</SPAN>
<SPAN class=n>SimpleConstants</SPAN> <SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>;</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>然后我们定义一些全局变量，用来记住计算MVP所需要的几个重要的变换矩阵。并且写一个初始化函数，对其进行初始化。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=n>XMMATRIX</SPAN> <SPAN class=n>g_mWorldToViewMatrix</SPAN><SPAN class=p>;</SPAN>
<SPAN class=n>XMMATRIX</SPAN> <SPAN class=n>g_mViewToWorldMatrix</SPAN><SPAN class=p>;</SPAN>
<SPAN class=n>XMMATRIX</SPAN> <SPAN class=n>g_mLightToWorldMatrix</SPAN><SPAN class=p>;</SPAN>
<SPAN class=n>XMMATRIX</SPAN> <SPAN class=n>g_mProjectionMatrix</SPAN><SPAN class=p>;</SPAN>
<SPAN class=n>XMMATRIX</SPAN> <SPAN class=n>g_mViewProjectionMatrix</SPAN><SPAN class=p>;</SPAN>

<SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">InitConstants</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=n>g_mViewToWorldMatrix</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMMatrixIdentity</SPAN><SPAN class=p>();</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>XMVECTOR</SPAN> <SPAN class=n>lightPositionX</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVectorSet</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-</SPAN><SPAN class=mf style="COLOR: rgb(0,132,255)">1.5f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">4.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">9.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>XMVECTOR</SPAN> <SPAN class=n>lightTargetX</SPAN>   <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVectorSet</SPAN><SPAN class=p>(</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>XMVECTOR</SPAN> <SPAN class=n>lightUpX</SPAN>       <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVectorSet</SPAN><SPAN class=p>(</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>g_mLightToWorldMatrix</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMMatrixInverse</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>XMMatrixLookAtRH</SPAN><SPAN class=p>(</SPAN><SPAN class=n>lightPositionX</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>lightTargetX</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>lightUpX</SPAN><SPAN class=p>));</SPAN>

    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">float</SPAN> <SPAN class=n>g_depthNear</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">float</SPAN> <SPAN class=n>g_depthFar</SPAN>  <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">100.0f</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">float</SPAN> <SPAN class=n>aspect</SPAN>      <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">static_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">float</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>nScreenWidth</SPAN><SPAN class=p>)</SPAN><SPAN class=o style="FONT-WEIGHT: 600">/</SPAN><SPAN class=k style="FONT-WEIGHT: 600">static_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">float</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>nScreenHeight</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>g_mProjectionMatrix</SPAN>  <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMMatrixPerspectiveOffCenterRH</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-</SPAN><SPAN class=n>aspect</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>aspect</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_depthNear</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_depthFar</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>XMVECTOR</SPAN> <SPAN class=n>eyePos</SPAN>         <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVectorSet</SPAN><SPAN class=p>(</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">2.5f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>XMVECTOR</SPAN> <SPAN class=n>lookAtPos</SPAN>      <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVectorSet</SPAN><SPAN class=p>(</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>XMVECTOR</SPAN> <SPAN class=n>upVec</SPAN>          <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVectorSet</SPAN><SPAN class=p>(</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>g_mWorldToViewMatrix</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMMatrixLookAtRH</SPAN><SPAN class=p>(</SPAN><SPAN class=n>eyePos</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>lookAtPos</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>upVec</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>g_mViewToWorldMatrix</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMMatrixInverse</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_mWorldToViewMatrix</SPAN><SPAN class=p>);</SPAN>

    <SPAN class=n>g_mViewProjectionMatrix</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>g_mWorldToViewMatrix</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>g_mProjectionMatrix</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>我们必须逐帧更新这些常量，也就是改变模型的位置，从而产生动画效果。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// this is the function used to update the constants
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">Update</SPAN><SPAN class=p>()</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">float</SPAN> <SPAN class=n>rotationSpeed</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XM_PI</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">2.0</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">/</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">120</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">static</SPAN> <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">float</SPAN> <SPAN class=n>rotationAngle</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>;</SPAN>
    
    <SPAN class=n>rotationAngle</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+=</SPAN> <SPAN class=n>rotationSpeed</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>rotationAngle</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;=</SPAN> <SPAN class=n>XM_PI</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">2.0</SPAN><SPAN class=p>)</SPAN> <SPAN class=n>rotationAngle</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-=</SPAN> <SPAN class=n>XM_PI</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">2.0</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>XMMATRIX</SPAN> <SPAN class=n>m</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMMatrixRotationRollPitchYaw</SPAN><SPAN class=p>(</SPAN><SPAN class=n>rotationAngle</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rotationAngle</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>XMStoreFloat4x4</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_modelView</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>XMMatrixTranspose</SPAN><SPAN class=p>(</SPAN><SPAN class=n>m</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>g_mWorldToViewMatrix</SPAN><SPAN class=p>));</SPAN>
    <SPAN class=n>XMStoreFloat4x4</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_modelViewProjection</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>XMMatrixTranspose</SPAN><SPAN class=p>(</SPAN><SPAN class=n>m</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>g_mViewProjectionMatrix</SPAN><SPAN class=p>));</SPAN>
    <SPAN class=n>XMVECTOR</SPAN> <SPAN class=n>v</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVectorSet</SPAN><SPAN class=p>(</SPAN><SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>v</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVector4Transform</SPAN><SPAN class=p>(</SPAN><SPAN class=n>v</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_mLightToWorldMatrix</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>v</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMVector4Transform</SPAN><SPAN class=p>(</SPAN><SPAN class=n>v</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_mWorldToViewMatrix</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>XMStoreFloat4</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_lightPosition</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>v</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_lightColor</SPAN>       <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMFLOAT4</SPAN><SPAN class=p>(</SPAN><SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_ambientColor</SPAN>     <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMFLOAT4</SPAN><SPAN class=p>(</SPAN><SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.7f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_lightAttenuation</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>XMFLOAT4</SPAN><SPAN class=p>(</SPAN><SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>);</SPAN>
    
    <SPAN class=n>memcpy</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pCbvDataBegin</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>,</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">sizeof</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_ConstantBufferData</SPAN><SPAN class=p>));</SPAN>
<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>同样的，我们需要创建一块CPU和GPU都能看到的缓冲区，用来向GPU传递这个常量。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>	<SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Create the constant buffer.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>	<SPAN class=p>{</SPAN>
        <SPAN class=n>size_t</SPAN> <SPAN class=n>sizeConstantBuffer</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">sizeof</SPAN><SPAN class=p>(</SPAN><SPAN class=n>SimpleConstants</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">255</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">~</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">255</SPAN><SPAN class=p>;</SPAN> <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// CB size is required to be 256-byte aligned.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>		<SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateCommittedResource</SPAN><SPAN class=p>(</SPAN>
			<SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_HEAP_PROPERTIES</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_HEAP_TYPE_UPLOAD</SPAN><SPAN class=p>),</SPAN>
			<SPAN class=n>D3D12_HEAP_FLAG_NONE</SPAN><SPAN class=p>,</SPAN>
			<SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_RESOURCE_DESC</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Buffer</SPAN><SPAN class=p>(</SPAN><SPAN class=n>sizeConstantBuffer</SPAN><SPAN class=p>),</SPAN>
			<SPAN class=n>D3D12_RESOURCE_STATE_GENERIC_READ</SPAN><SPAN class=p>,</SPAN>
			<SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN>
			<SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pConstantUploadBuffer</SPAN><SPAN class=p>)));</SPAN>

        <SPAN class=k style="FONT-WEIGHT: 600">for</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>uint32_t</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN> <SPAN class=n>nFrameCount</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>i</SPAN><SPAN class=o style="FONT-WEIGHT: 600">++</SPAN><SPAN class=p>)</SPAN>
        <SPAN class=p>{</SPAN>
            <SPAN class=n>CD3DX12_CPU_DESCRIPTOR_HANDLE</SPAN> <SPAN class=n>cbvHandle</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pCbvSrvHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetCPUDescriptorHandleForHeapStart</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_nCbvSrvDescriptorSize</SPAN><SPAN class=p>);</SPAN>
		    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Describe and create a constant buffer view.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>		    <SPAN class=n>D3D12_CONSTANT_BUFFER_VIEW_DESC</SPAN> <SPAN class=n>cbvDesc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
		    <SPAN class=n>cbvDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>BufferLocation</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>g_pConstantUploadBuffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetGPUVirtualAddress</SPAN><SPAN class=p>();</SPAN>
		    <SPAN class=n>cbvDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>SizeInBytes</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>sizeConstantBuffer</SPAN><SPAN class=p>;</SPAN>
		    <SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateConstantBufferView</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>cbvDesc</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>cbvHandle</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=p>}</SPAN>

		<SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Map and initialize the constant buffer. We don't unmap this until the
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>		<SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// app closes. Keeping things mapped for the lifetime of the resource is okay.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>		<SPAN class=n>CD3DX12_RANGE</SPAN> <SPAN class=n>readRange</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>);</SPAN>		<SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// We do not intend to read from this resource on the CPU.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>		<SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pConstantUploadBuffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Map</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>readRange</SPAN><SPAN class=p>,</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN><SPAN class=o style="FONT-WEIGHT: 600">**&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pCbvDataBegin</SPAN><SPAN class=p>)));</SPAN>
	<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// 1 SRV + how many CBVs we have
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>uint32_t</SPAN> <SPAN class=n>nFrameResourceDescriptorOffset</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>g_nFrameIndex</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>CD3DX12_GPU_DESCRIPTOR_HANDLE</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">cbvSrvHandle</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pCbvSrvHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetGPUDescriptorHandleForHeapStart</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>nFrameResourceDescriptorOffset</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_nCbvSrvDescriptorSize</SPAN><SPAN class=p>);</SPAN>

    <SPAN class=n>g_pCommandList</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>SetGraphicsRootDescriptorTable</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">2</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>cbvSrvHandle</SPAN><SPAN class=p>);</SPAN>
</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B style="FONT-WEIGHT: 600">创建贴图</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>接下来让我们创建贴图。我们这里创建一个512x512的国际象棋棋盘格的基本贴图。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-text style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>const uint32_t nTextureWidth = 512;
const uint32_t nTextureHeight = 512;
const uint32_t nTexturePixelSize = 4;       // R8G8B8A8

// Generate a simple black and white checkerboard texture.
uint8_t* GenerateTextureData()
{
    const uint32_t nRowPitch = nTextureWidth * nTexturePixelSize;
    const uint32_t nCellPitch = nRowPitch &gt;&gt; 3;		// The width of a cell in the checkboard texture.
    const uint32_t nCellHeight = nTextureWidth &gt;&gt; 3;	// The height of a cell in the checkerboard texture.
    const uint32_t nTextureSize = nRowPitch * nTextureHeight;
	uint8_t* pData = new uint8_t[nTextureSize];

	for (uint32_t n = 0; n &lt; nTextureSize; n += nTexturePixelSize)
	{
		uint32_t x = n % nRowPitch;
		uint32_t y = n / nRowPitch;
		uint32_t i = x / nCellPitch;
		uint32_t j = y / nCellHeight;

		if (i % 2 == j % 2)
		{
			pData[n] = 0x00;		// R
			pData[n + 1] = 0x00;	// G
			pData[n + 2] = 0x00;	// B
			pData[n + 3] = 0xff;	// A
		}
		else
		{
			pData[n] = 0xff;		// R
			pData[n + 1] = 0xff;	// G
			pData[n + 2] = 0xff;	// B
			pData[n + 3] = 0xff;	// A
		}
	}

	return pData;
}
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>然后依然是在堆上创建缓冲区，用来传递贴图给GPU。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Generate the texture
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pTextureData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>GenerateTextureData</SPAN><SPAN class=p>();</SPAN>

    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Create the texture and sampler.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=p>{</SPAN>
        <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Describe and create a Texture2D.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=n>D3D12_RESOURCE_DESC</SPAN> <SPAN class=n>textureDesc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>MipLevels</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Format</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>DXGI_FORMAT_R8G8B8A8_UNORM</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Width</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>nTextureWidth</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Height</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>nTextureHeight</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Flags</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_RESOURCE_FLAG_NONE</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>DepthOrArraySize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>SampleDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Count</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>SampleDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Quality</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Dimension</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_RESOURCE_DIMENSION_TEXTURE2D</SPAN><SPAN class=p>;</SPAN>

        <SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateCommittedResource</SPAN><SPAN class=p>(</SPAN>
            <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_HEAP_PROPERTIES</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_HEAP_TYPE_DEFAULT</SPAN><SPAN class=p>),</SPAN>
            <SPAN class=n>D3D12_HEAP_FLAG_NONE</SPAN><SPAN class=p>,</SPAN>
            <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>textureDesc</SPAN><SPAN class=p>,</SPAN>
            <SPAN class=n>D3D12_RESOURCE_STATE_COPY_DEST</SPAN><SPAN class=p>,</SPAN>
            <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN>
            <SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pTextureBuffer</SPAN><SPAN class=p>)));</SPAN>

        <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>UINT</SPAN> <SPAN class=n>subresourceCount</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>DepthOrArraySize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>textureDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>MipLevels</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>UINT64</SPAN> <SPAN class=n>uploadBufferSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>GetRequiredIntermediateSize</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pTextureBuffer</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>subresourceCount</SPAN><SPAN class=p>);</SPAN>

        <SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateCommittedResource</SPAN><SPAN class=p>(</SPAN>
            <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_HEAP_PROPERTIES</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_HEAP_TYPE_UPLOAD</SPAN><SPAN class=p>),</SPAN>
            <SPAN class=n>D3D12_HEAP_FLAG_NONE</SPAN><SPAN class=p>,</SPAN>
            <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_RESOURCE_DESC</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Buffer</SPAN><SPAN class=p>(</SPAN><SPAN class=n>uploadBufferSize</SPAN><SPAN class=p>),</SPAN>
            <SPAN class=n>D3D12_RESOURCE_STATE_GENERIC_READ</SPAN><SPAN class=p>,</SPAN>
            <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN>
            <SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>pTextureUploadHeap</SPAN><SPAN class=p>)));</SPAN>

        <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Copy data to the intermediate upload heap and then schedule a copy 
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// from the upload heap to the Texture2D.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=n>D3D12_SUBRESOURCE_DATA</SPAN> <SPAN class=n>textureData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
        <SPAN class=n>textureData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pTextureData</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>RowPitch</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>nTextureWidth</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>nTexturePixelSize</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>textureData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>SlicePitch</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>textureData</SPAN><SPAN class=p>.</SPAN><SPAN class=n>RowPitch</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>nTextureHeight</SPAN><SPAN class=p>;</SPAN>

        <SPAN class=n>UpdateSubresources</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pCommandList</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>g_pTextureBuffer</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>pTextureUploadHeap</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>subresourceCount</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>textureData</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=n>g_pCommandList</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>ResourceBarrier</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_RESOURCE_BARRIER</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Transition</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pTextureBuffer</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>D3D12_RESOURCE_STATE_COPY_DEST</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE</SPAN><SPAN class=p>));</SPAN>

        <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Describe and create a sampler.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=n>D3D12_SAMPLER_DESC</SPAN> <SPAN class=n>samplerDesc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Filter</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_FILTER_MIN_MAG_MIP_LINEAR</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>AddressU</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_TEXTURE_ADDRESS_MODE_WRAP</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>AddressV</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_TEXTURE_ADDRESS_MODE_WRAP</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>AddressW</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_TEXTURE_ADDRESS_MODE_WRAP</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>MinLOD</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>MaxLOD</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_FLOAT32_MAX</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>MipLODBias</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0f</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>MaxAnisotropy</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>samplerDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>ComparisonFunc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_COMPARISON_FUNC_ALWAYS</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateSampler</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>samplerDesc</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_pSamplerHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetCPUDescriptorHandleForHeapStart</SPAN><SPAN class=p>());</SPAN>

        <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Describe and create a SRV for the texture.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=n>D3D12_SHADER_RESOURCE_VIEW_DESC</SPAN> <SPAN class=n>srvDesc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
        <SPAN class=n>srvDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Shader4ComponentMapping</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>srvDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Format</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>DXGI_FORMAT_R8G8B8A8_UNORM</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>srvDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>ViewDimension</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_SRV_DIMENSION_TEXTURE2D</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>srvDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Texture2D</SPAN><SPAN class=p>.</SPAN><SPAN class=n>MipLevels</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>CD3DX12_CPU_DESCRIPTOR_HANDLE</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">srvHandle</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pCbvSrvHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetCPUDescriptorHandleForHeapStart</SPAN><SPAN class=p>());</SPAN>
        <SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateShaderResourceView</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pTextureBuffer</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>srvDesc</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>srvHandle</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B style="FONT-WEIGHT: 600">更新Root 
Signature</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>Root 
Signature是DX12新增的概念。其实就好比我们代码头文件里面的函数申明，是向DX介绍我们资源的整体结构。因为我们增加了贴图和常量这两种类型的新资源，我们需要更新它。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>   <SPAN class=n>CD3DX12_DESCRIPTOR_RANGE1</SPAN> <SPAN class=n>ranges</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">3</SPAN><SPAN class=p>];</SPAN>
        <SPAN class=n>ranges</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>].</SPAN><SPAN class=n>Init</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_DESCRIPTOR_RANGE_TYPE_SRV</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=n>ranges</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>].</SPAN><SPAN class=n>Init</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=n>ranges</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">2</SPAN><SPAN class=p>].</SPAN><SPAN class=n>Init</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_DESCRIPTOR_RANGE_TYPE_CBV</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">6</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC</SPAN><SPAN class=p>);</SPAN>

        <SPAN class=n>CD3DX12_ROOT_PARAMETER1</SPAN> <SPAN class=n>rootParameters</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">3</SPAN><SPAN class=p>];</SPAN>
        <SPAN class=n>rootParameters</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>].</SPAN><SPAN class=n>InitAsDescriptorTable</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>ranges</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>],</SPAN> <SPAN class=n>D3D12_SHADER_VISIBILITY_PIXEL</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=n>rootParameters</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>].</SPAN><SPAN class=n>InitAsDescriptorTable</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>ranges</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>],</SPAN> <SPAN class=n>D3D12_SHADER_VISIBILITY_PIXEL</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=n>rootParameters</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">2</SPAN><SPAN class=p>].</SPAN><SPAN class=n>InitAsDescriptorTable</SPAN><SPAN class=p>(</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>ranges</SPAN><SPAN class=p>[</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">2</SPAN><SPAN class=p>],</SPAN> <SPAN class=n>D3D12_SHADER_VISIBILITY_ALL</SPAN><SPAN class=p>);</SPAN>
</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B style="FONT-WEIGHT: 600">为新增资源类型创建Heap</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>所有的图形资源缓冲区都需要在堆里面创建。每种资源对于堆的管理（包括内存读写保护，可执行标志，以及访问它的GPU模块）的要求不同，我们需要分别为他们申请堆。（贴图和常量是可以共用一个堆的）</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Describe and create a depth stencil view (DSV) descriptor heap.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>D3D12_DESCRIPTOR_HEAP_DESC</SPAN> <SPAN class=n>dsvHeapDesc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
    <SPAN class=n>dsvHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>NumDescriptors</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>dsvHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Type</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DESCRIPTOR_HEAP_TYPE_DSV</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>dsvHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Flags</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DESCRIPTOR_HEAP_FLAG_NONE</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateDescriptorHeap</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>dsvHeapDesc</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pDsvHeap</SPAN><SPAN class=p>)));</SPAN>

    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Describe and create a shader resource view (SRV) and constant 
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// buffer view (CBV) descriptor heap.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>D3D12_DESCRIPTOR_HEAP_DESC</SPAN> <SPAN class=n>cbvSrvHeapDesc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
    <SPAN class=n>cbvSrvHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>NumDescriptors</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN>
        <SPAN class=n>nFrameCount</SPAN>                                     <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// FrameCount Cbvs.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN>                                            <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// + 1 for the Srv(Texture).
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>cbvSrvHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Type</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>cbvSrvHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Flags</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateDescriptorHeap</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>cbvSrvHeapDesc</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pCbvSrvHeap</SPAN><SPAN class=p>)));</SPAN>

    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Describe and create a sampler descriptor heap.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>D3D12_DESCRIPTOR_HEAP_DESC</SPAN> <SPAN class=n>samplerHeapDesc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
    <SPAN class=n>samplerHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>NumDescriptors</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>samplerHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Type</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>samplerHeapDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Flags</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateDescriptorHeap</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>samplerHeapDesc</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pSamplerHeap</SPAN><SPAN class=p>)));</SPAN>

    <SPAN class=n>g_nCbvSrvDescriptorSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetDescriptorHandleIncrementSize</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV</SPAN><SPAN class=p>);</SPAN>

    <SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateCommandAllocator</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_COMMAND_LIST_TYPE_DIRECT</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pCommandAllocator</SPAN><SPAN class=p>)));</SPAN>
</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B style="FONT-WEIGHT: 600">创建深度/模板缓冲区</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>我们需要打开深度测试来完成图形的隐藏面消隐<B style="FONT-WEIGHT: 600">。</B></P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>	<SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// Create the depth stencil view.
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>	<SPAN class=p>{</SPAN>
		<SPAN class=n>D3D12_DEPTH_STENCIL_VIEW_DESC</SPAN> <SPAN class=n>depthStencilDesc</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
		<SPAN class=n>depthStencilDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Format</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>DXGI_FORMAT_D32_FLOAT</SPAN><SPAN class=p>;</SPAN>
		<SPAN class=n>depthStencilDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>ViewDimension</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DSV_DIMENSION_TEXTURE2D</SPAN><SPAN class=p>;</SPAN>
		<SPAN class=n>depthStencilDesc</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Flags</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>D3D12_DSV_FLAG_NONE</SPAN><SPAN class=p>;</SPAN>

		<SPAN class=n>D3D12_CLEAR_VALUE</SPAN> <SPAN class=n>depthOptimizedClearValue</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{};</SPAN>
		<SPAN class=n>depthOptimizedClearValue</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Format</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>DXGI_FORMAT_D32_FLOAT</SPAN><SPAN class=p>;</SPAN>
		<SPAN class=n>depthOptimizedClearValue</SPAN><SPAN class=p>.</SPAN><SPAN class=n>DepthStencil</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Depth</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>;</SPAN>
		<SPAN class=n>depthOptimizedClearValue</SPAN><SPAN class=p>.</SPAN><SPAN class=n>DepthStencil</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Stencil</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>

		<SPAN class=n>ThrowIfFailed</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateCommittedResource</SPAN><SPAN class=p>(</SPAN>
			<SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_HEAP_PROPERTIES</SPAN><SPAN class=p>(</SPAN><SPAN class=n>D3D12_HEAP_TYPE_DEFAULT</SPAN><SPAN class=p>),</SPAN>
			<SPAN class=n>D3D12_HEAP_FLAG_NONE</SPAN><SPAN class=p>,</SPAN>
			<SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>CD3DX12_RESOURCE_DESC</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Tex2D</SPAN><SPAN class=p>(</SPAN><SPAN class=n>DXGI_FORMAT_D32_FLOAT</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>nScreenWidth</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>nScreenHeight</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</SPAN><SPAN class=p>),</SPAN>
			<SPAN class=n>D3D12_RESOURCE_STATE_DEPTH_WRITE</SPAN><SPAN class=p>,</SPAN>
			<SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>depthOptimizedClearValue</SPAN><SPAN class=p>,</SPAN>
			<SPAN class=n>IID_PPV_ARGS</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>g_pDepthStencilBuffer</SPAN><SPAN class=p>)</SPAN>
			<SPAN class=p>));</SPAN>

		<SPAN class=n>g_pDev</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>CreateDepthStencilView</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDepthStencilBuffer</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Get</SPAN><SPAN class=p>(),</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>depthStencilDesc</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>g_pDsvHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetCPUDescriptorHandleForHeapStart</SPAN><SPAN class=p>());</SPAN>
	<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-text style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>CD3DX12_CPU_DESCRIPTOR_HANDLE rtvHandle(g_pRtvHeap-&gt;GetCPUDescriptorHandleForHeapStart(), g_nFrameIndex, g_nRtvDescriptorSize);
    CD3DX12_CPU_DESCRIPTOR_HANDLE dsvHandle(g_pDsvHeap-&gt;GetCPUDescriptorHandleForHeapStart());
    g_pCommandList-&gt;OMSetRenderTargets(1, &amp;rtvHandle, FALSE, &amp;dsvHandle);
</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=n>g_pCommandList</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>ClearDepthStencilView</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pDsvHeap</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetCPUDescriptorHandleForHeapStart</SPAN><SPAN class=p>(),</SPAN> <SPAN class=n>D3D12_CLEAR_FLAG_DEPTH</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>);</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B style="FONT-WEIGHT: 600">绘图</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>最后，更新我们的绘图指令，让其根据索引顺序进行绘制，而不是顶点缓冲区当中的顶点顺序。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>   <SPAN class=n>g_pCommandList</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>DrawIndexedInstanced</SPAN><SPAN class=p>(</SPAN><SPAN class=n>torus</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_indexCount</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>);</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B style="FONT-WEIGHT: 600">Shader</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>由于我们改变了顶点数据结构，并且引进了光照，我们需要修改我们的Shader。为了方便，我们可以为VS 
Shader和PS Shader定义不同的入口函数（而不是缺省的main），这样就可以把两个Shader的代码放在一个文件当中。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>让我们新创建一个simple.hlsl的文件，输入如下代码：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-glsl style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include "cbuffer2.h"</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include "vsoutput2.hs"</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include "illum.hs"</SPAN>

<SPAN class=n>v2p</SPAN> <SPAN class=n>VSMain</SPAN><SPAN class=p>(</SPAN><SPAN class=n>a2v</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=n>v2p</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">output</SPAN><SPAN class=p>;</SPAN>

	<SPAN class=k style="FONT-WEIGHT: 600">output</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Position</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>mul</SPAN><SPAN class=p>(</SPAN><SPAN class=n>float4</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Position</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>),</SPAN> <SPAN class=n>m_modelViewProjection</SPAN><SPAN class=p>);</SPAN>
	<SPAN class=n>float3</SPAN> <SPAN class=n>vN</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>normalize</SPAN><SPAN class=p>(</SPAN><SPAN class=n>mul</SPAN><SPAN class=p>(</SPAN><SPAN class=n>float4</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Normal</SPAN><SPAN class=p>,</SPAN> <SPAN class=mo style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>),</SPAN> <SPAN class=n>m_modelView</SPAN><SPAN class=p>).</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>);</SPAN>
	<SPAN class=n>float3</SPAN> <SPAN class=n>vT</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>normalize</SPAN><SPAN class=p>(</SPAN><SPAN class=n>mul</SPAN><SPAN class=p>(</SPAN><SPAN class=n>float4</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Tangent</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>,</SPAN> <SPAN class=mo style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>),</SPAN> <SPAN class=n>m_modelView</SPAN><SPAN class=p>).</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>);</SPAN>
	<SPAN class=k style="FONT-WEIGHT: 600">output</SPAN><SPAN class=p>.</SPAN><SPAN class=n>vPosInView</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>mul</SPAN><SPAN class=p>(</SPAN><SPAN class=n>float4</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Position</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>),</SPAN> <SPAN class=n>m_modelView</SPAN><SPAN class=p>).</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>;</SPAN>

	<SPAN class=k style="FONT-WEIGHT: 600">output</SPAN><SPAN class=p>.</SPAN><SPAN class=n>vNorm</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>vN</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=k style="FONT-WEIGHT: 600">output</SPAN><SPAN class=p>.</SPAN><SPAN class=n>vTang</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>float4</SPAN><SPAN class=p>(</SPAN><SPAN class=n>vT</SPAN><SPAN class=p>,</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Tangent</SPAN><SPAN class=p>.</SPAN><SPAN class=n>w</SPAN><SPAN class=p>);</SPAN>

	<SPAN class=k style="FONT-WEIGHT: 600">output</SPAN><SPAN class=p>.</SPAN><SPAN class=n>TextureUV</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>TextureUV</SPAN><SPAN class=p>;</SPAN>

	<SPAN class=k style="FONT-WEIGHT: 600">return</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">output</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=n>SamplerState</SPAN> <SPAN class=n>samp0</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">:</SPAN> <SPAN class=n>register</SPAN><SPAN class=p>(</SPAN><SPAN class=n>s0</SPAN><SPAN class=p>);</SPAN>
<SPAN class=n>Texture2D</SPAN> <SPAN class=n>colorMap</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">:</SPAN> <SPAN class=n>register</SPAN><SPAN class=p>(</SPAN><SPAN class=n>t0</SPAN><SPAN class=p>);</SPAN>

<SPAN class=n>float4</SPAN> <SPAN class=n>PSMain</SPAN><SPAN class=p>(</SPAN><SPAN class=n>v2p</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">:</SPAN> <SPAN class=n>SV_TARGET</SPAN>
<SPAN class=p>{</SPAN>
	<SPAN class=n>float3</SPAN> <SPAN class=n>lightRgb</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_lightColor</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=n>float4</SPAN> <SPAN class=n>lightAtten</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_lightAttenuation</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=n>float3</SPAN> <SPAN class=n>ambientRgb</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_ambientColor</SPAN><SPAN class=p>.</SPAN><SPAN class=n>rgb</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=k style="FONT-WEIGHT: 600">float</SPAN>  <SPAN class=n>specPow</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">30</SPAN><SPAN class=p>;</SPAN>

	<SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>float3</SPAN> <SPAN class=n>vN</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>vNorm</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>float3</SPAN> <SPAN class=n>vT</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>vTang</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>float3</SPAN> <SPAN class=n>vB</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>vTang</SPAN><SPAN class=p>.</SPAN><SPAN class=n>w</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>cross</SPAN><SPAN class=p>(</SPAN><SPAN class=n>vN</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>vT</SPAN><SPAN class=p>);</SPAN>
	<SPAN class=n>float3</SPAN> <SPAN class=n>vL</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_lightPosition</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xyz</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>vPosInView</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>float3</SPAN> <SPAN class=n>vV</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>normalize</SPAN><SPAN class=p>(</SPAN><SPAN class=n>float3</SPAN><SPAN class=p>(</SPAN><SPAN class=mo style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN><SPAN class=mo style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN><SPAN class=mo style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>vPosInView</SPAN><SPAN class=p>);</SPAN>
	<SPAN class=k style="FONT-WEIGHT: 600">float</SPAN> <SPAN class=n>d</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>length</SPAN><SPAN class=p>(</SPAN><SPAN class=n>vL</SPAN><SPAN class=p>);</SPAN> <SPAN class=n>vL</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>normalize</SPAN><SPAN class=p>(</SPAN><SPAN class=n>vL</SPAN><SPAN class=p>);</SPAN>
	<SPAN class=k style="FONT-WEIGHT: 600">float</SPAN> <SPAN class=n>attenuation</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>saturate</SPAN><SPAN class=p>(</SPAN><SPAN class=mf style="COLOR: rgb(0,132,255)">1.0</SPAN><SPAN class=n>f</SPAN><SPAN class=o style="FONT-WEIGHT: 600">/</SPAN><SPAN class=p>(</SPAN><SPAN class=n>lightAtten</SPAN><SPAN class=p>.</SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>lightAtten</SPAN><SPAN class=p>.</SPAN><SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>d</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>lightAtten</SPAN><SPAN class=p>.</SPAN><SPAN class=n>z</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>d</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>d</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=n>lightAtten</SPAN><SPAN class=p>.</SPAN><SPAN class=n>w</SPAN><SPAN class=p>);</SPAN>

	<SPAN class=n>float4</SPAN> <SPAN class=n>normalGloss</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>{</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0</SPAN><SPAN class=n>f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.2</SPAN><SPAN class=n>f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.2</SPAN><SPAN class=n>f</SPAN><SPAN class=p>,</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.0</SPAN><SPAN class=n>f</SPAN> <SPAN class=p>};</SPAN>
	<SPAN class=n>normalGloss</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xyz</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>normalGloss</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xyz</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">2.0</SPAN><SPAN class=n>f</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">1.0</SPAN><SPAN class=n>f</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=n>normalGloss</SPAN><SPAN class=p>.</SPAN><SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN><SPAN class=n>normalGloss</SPAN><SPAN class=p>.</SPAN><SPAN class=n>y</SPAN><SPAN class=p>;</SPAN> <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// normal map has green channel inverted</SPAN>

	<SPAN class=n>float3</SPAN> <SPAN class=n>vBumpNorm</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>normalize</SPAN><SPAN class=p>(</SPAN><SPAN class=n>normalGloss</SPAN><SPAN class=p>.</SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>vT</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>normalGloss</SPAN><SPAN class=p>.</SPAN><SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>vB</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>normalGloss</SPAN><SPAN class=p>.</SPAN><SPAN class=n>z</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>vN</SPAN><SPAN class=p>);</SPAN>
	<SPAN class=n>float3</SPAN> <SPAN class=n>vGeomNorm</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>normalize</SPAN><SPAN class=p>(</SPAN><SPAN class=n>vN</SPAN><SPAN class=p>);</SPAN>

	<SPAN class=n>float3</SPAN> <SPAN class=n>diff_col</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>colorMap</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Sample</SPAN><SPAN class=p>(</SPAN><SPAN class=n>samp0</SPAN><SPAN class=p>,</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">input</SPAN><SPAN class=p>.</SPAN><SPAN class=n>TextureUV</SPAN><SPAN class=p>.</SPAN><SPAN class=n>xy</SPAN><SPAN class=p>).</SPAN><SPAN class=n>xyz</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=n>float3</SPAN> <SPAN class=n>spec_col</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.4</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>normalGloss</SPAN><SPAN class=p>.</SPAN><SPAN class=n>w</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=mf style="COLOR: rgb(0,132,255)">0.1</SPAN><SPAN class=p>;</SPAN>
	<SPAN class=n>float3</SPAN> <SPAN class=n>vLightInts</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>attenuation</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>lightRgb</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>BRDF2_ts_nphong_nofr</SPAN><SPAN class=p>(</SPAN><SPAN class=n>vBumpNorm</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>vGeomNorm</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>vL</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>vV</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>diff_col</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>spec_col</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>specPow</SPAN><SPAN class=p>);</SPAN>
	<SPAN class=n>vLightInts</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+=</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>diff_col</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>ambientRgb</SPAN><SPAN class=p>);</SPAN>

	<SPAN class=k style="FONT-WEIGHT: 600">return</SPAN> <SPAN class=n>float4</SPAN><SPAN class=p>(</SPAN><SPAN class=n>vLightInts</SPAN><SPAN class=p>,</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>因为我们修改了入口函数，我们需要通知DX这个修改。具体是在我们代码当中动态Compile Shader的地方：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>   <SPAN class=n>D3DCompileFromFile</SPAN><SPAN class=p>(</SPAN>
        <SPAN class=sa>L</SPAN><SPAN class=s style="COLOR: rgb(241,64,60)">"simple.hlsl"</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=n>D3D_COMPILE_STANDARD_FILE_INCLUDE</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=s style="COLOR: rgb(241,64,60)">"VSMain"</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=s style="COLOR: rgb(241,64,60)">"vs_5_0"</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=n>compileFlags</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>vertexShader</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>error</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>error</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN> <SPAN class=n>OutputDebugString</SPAN><SPAN class=p>((</SPAN><SPAN class=n>LPCTSTR</SPAN><SPAN class=p>)</SPAN><SPAN class=n>error</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetBufferPointer</SPAN><SPAN class=p>());</SPAN> <SPAN class=n>error</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Release</SPAN><SPAN class=p>();</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">throw</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>exception</SPAN><SPAN class=p>();</SPAN> <SPAN class=p>}</SPAN>

    <SPAN class=n>D3DCompileFromFile</SPAN><SPAN class=p>(</SPAN>
        <SPAN class=sa>L</SPAN><SPAN class=s style="COLOR: rgb(241,64,60)">"simple.hlsl"</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=n>D3D_COMPILE_STANDARD_FILE_INCLUDE</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=s style="COLOR: rgb(241,64,60)">"PSMain"</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=s style="COLOR: rgb(241,64,60)">"ps_5_0"</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=n>compileFlags</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>pixelShader</SPAN><SPAN class=p>,</SPAN>
        <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>error</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>error</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN> <SPAN class=n>OutputDebugString</SPAN><SPAN class=p>((</SPAN><SPAN class=n>LPCTSTR</SPAN><SPAN class=p>)</SPAN><SPAN class=n>error</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>GetBufferPointer</SPAN><SPAN class=p>());</SPAN> <SPAN class=n>error</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Release</SPAN><SPAN class=p>();</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">throw</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>exception</SPAN><SPAN class=p>();</SPAN> <SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>如果Shader的代码编译有问题，编译错误会通过OutputDebugString进行输出。这个输出在用Visual 
Studio调试的时候可以看到。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B style="FONT-WEIGHT: 600">编译</B></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>编译命令如下：</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>调试版</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-text style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>D:\wenli\Source\Repos\GameEngineFromScratch\Platform\Windows&gt;cl /EHsc /Debug /Zi /D_DEBUG_SHADER -I./DirectXMath helloengine_d3d12.cpp user32.lib d3d12.lib d3dcompiler.lib dxgi.lib</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>执行版</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-text style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>D:\wenli\Source\Repos\GameEngineFromScratch\Platform\Windows&gt;cl /EHsc -I./DirectXMath helloengine_d3d12.cpp user32.lib d3d12.lib d3dcompiler.lib dxgi.lib</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>（本文完整代码在GitHub的branch article_16当中）</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B style="FONT-WEIGHT: 600">参考引用</B></P>
<OL 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; DISPLAY: table; LETTER-SPACING: normal; COUNTER-RESET: ol 0; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A class=" wrap external" style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " href="https://link.zhihu.com/?target=https%3A//en.m.wikipedia.org/wiki/Torus" rel="nofollow noreferrer" target=_blank  data-za-detail-view-id="1043">Torus - Wikipedia</A> 
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A class=" wrap external" style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " href="https://link.zhihu.com/?target=https%3A//github.com/Microsoft/DirectX-Graphics-Samples" rel="nofollow noreferrer" target=_blank  data-za-detail-view-id="1043">Microsoft/DirectX-Graphics-Samples</A></LI></OL>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P><FIGURE 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><IMG class="content_image lazy" style="MAX-WIDTH: 100%; MARGIN: 0px auto; DISPLAY: block" src="https://pic2.zhimg.com/80/v2-229daa2bfc2444f20a57a2deabf6522d_hd.png" width=88  data-actualsrc="https://pic2.zhimg.com/v2-229daa2bfc2444f20a57a2deabf6522d_b.png" data-rawheight="31" data-rawwidth="88"></FIGURE> 
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>本作品采用<A class=" wrap external" style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " href="https://link.zhihu.com/?target=http%3A//creativecommons.org/licenses/by/4.0/" rel="nofollow noreferrer" target=_blank  data-za-detail-view-id="1043">知识共享署名 4.0 国际许可协议</A>进行许可。</P></body>
</html>
