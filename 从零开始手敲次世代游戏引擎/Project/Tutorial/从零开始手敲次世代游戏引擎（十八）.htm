<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>从零开始手敲次世代游戏引擎（十八）</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<P><EM><A href="https://zhuanlan.zhihu.com/p/29023579" target=_blank >原文链接</A> </EM></P>
<P>
<EM>
(未修改原文）
</EM></P>
<P>
<EM>正文开始：</EM>

</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 0px 0px 1.4em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>如上一篇预告的，本篇我们对游戏引擎当中的内存管理进行一些初步的探讨。<BR>首先，关于游戏引擎内存管理的必要性，除了为了实现加载远大于物理内存容量的内容（比如开放世界游戏）之外，还有很多性能和调试方面的考虑。关于这方面在<A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=https%3A//www.gamasutra.com/blogs/MichaelKissner/20151104/258271/Writing_a_Game_Engine_from_Scratch__Part_2_Memory.php" 
rel="nofollow noreferrer" target=_blank 
data-za-detail-view-id="1043">参考引用1</A>当中有比较详细且风趣的阐述。<BR>当然<A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=https%3A//www.gamasutra.com/blogs/MichaelKissner/20151104/258271/Writing_a_Game_Engine_from_Scratch__Part_2_Memory.php" 
rel="nofollow noreferrer" target=_blank 
data-za-detail-view-id="1043">参考引用1</A>成文时间是差不多两年以前，很多参数在今天看来已经有了一些变化。比如当代CPU和内存之间的带宽一般在几十个Gbps，而GPU与内存（显存）之间的带宽已经飙升到几百个Gbps的水准。但是这并没有改变内存访问依然远远落后于CPU／GPU计算能力的状况。<BR>而且尤为重要的是，对于游戏引擎（运行时）来说，一切都是数个毫秒（VR游戏要求120fps）到十数个毫秒（60fps），最多也就是33毫秒（30fps）的人生的轮回。在这样的系统当中，每一个毫秒都弥足珍贵，都值得我们去拼。（当然，就如我们前一篇指出的，也并不是所有的处理都需要按照这个节奏去跑）<BR>这也回答了在本系列为什么采用C／C++这种“中级语言”进行编程。因为这是一个在性能／控制力／可维护性上比较理想的折衷点。<BR>这里我补充一下关于malloc／new的知识，为什么说它们比较低效。<BR>我们知道，操作系统的主要功能就是管理计算机系统的各种硬件资源。应用程序需要使用硬件资源到时候，需要向操作系统进行申请。而这种申请的接口，就被称为系统调用。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>在近代操作系统当中，出于安全方面的考虑，操作系统与用户程序不是跑在一个级别上的。操作系统拥有所有的特权，而用户程序只是跑在操作系统提供的一个虚拟环境之上。用户程序看到的内存地址并不是真正的物理内存地址，而是一个虚拟的地址空间。这个地址空间是完全为用户程序定制的，不同的用户程序，即使这个地址一样，也不是指向同一个物理内存（或者分页文件）地址。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>因此，当我们调用malloc／new进行heap分配的时候，并不是我们的线程直接杀入内核，去领一块内存出来。而是我们提交一个申领申请，放在放申请单的盒子里，然后等。操作系统方面按顺序处理这些申请，处理完了将处理结果放在处理结果盒子里，然后叫我们的号让我们去领。这个过程和我们在生活当中到特权机关去办事很类似。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>虽然这些系统API调用看起来都是同步的，但实际上这是一个异步操作，只不过在操作完成之前，我们的线程会被block住，操作完成了，线程unblock，函数返回，看起来就像普通函数调用那样，其实这是一个比较复杂的过程。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>而且在这个过程当中的参数传递，一般情况下都会发生拷贝。这是因为操作系统和用户程序分别工作在不同的地址空间，因此直接传递指针（地址）也是没有什么意义的。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>因此，提高程序在CPU端的执行效率的一个重要手段，就是要减少系统调用。在程序初始化阶段就一次申领所需的资源，然后自己内部进行分配管理，这就是一种常用的减少系统调用的方法。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=http%3A//allenchou.net/2013/05/memory-management-part-1-of-3-the-allocator/" 
rel="nofollow noreferrer" target=_blank 
data-za-detail-view-id="1043">参考引用4</A>提供了一种基于块链（block 
chain）的内存管理方法。我们首先将它引入到我们的引擎当中。这部分属于引擎的核心内容，因此我们将文件创建在Framework/Common下面：</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>Allocator.hpp</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>&lt;cstddef&gt;</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>&lt;cstdint&gt;</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
<SPAN class=k style="FONT-WEIGHT: 600">namespace</SPAN> <SPAN class=n>My</SPAN> <SPAN class=p>{</SPAN>

    <SPAN class=k style="FONT-WEIGHT: 600">struct</SPAN> <SPAN class=n>BlockHeader</SPAN> <SPAN class=p>{</SPAN>
        <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// union-ed with data
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pNext</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=p>};</SPAN>

    <SPAN class=k style="FONT-WEIGHT: 600">struct</SPAN> <SPAN class=n>PageHeader</SPAN> <SPAN class=p>{</SPAN>
        <SPAN class=n>PageHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pNext</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">Blocks</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
                <SPAN class=k style="FONT-WEIGHT: 600">return</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">this</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=p>}</SPAN>
    <SPAN class=p>};</SPAN>

    <SPAN class=k style="FONT-WEIGHT: 600">class</SPAN><SPAN class=err style="COLOR: rgb(241,64,60)"> </SPAN><SPAN class=nc style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">Allocator</SPAN> <SPAN class=p>{</SPAN>
        <SPAN class=k style="FONT-WEIGHT: 600">public</SPAN><SPAN class=o style="FONT-WEIGHT: 600">:</SPAN>
                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// debug patterns
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=k style="FONT-WEIGHT: 600">static</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>uint8_t</SPAN> <SPAN class=n>PATTERN_ALIGN</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mh style="COLOR: rgb(0,132,255)">0xFC</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=k style="FONT-WEIGHT: 600">static</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>uint8_t</SPAN> <SPAN class=n>PATTERN_ALLOC</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mh style="COLOR: rgb(0,132,255)">0xFD</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=k style="FONT-WEIGHT: 600">static</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>uint8_t</SPAN> <SPAN class=n>PATTERN_FREE</SPAN>  <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mh style="COLOR: rgb(0,132,255)">0xFE</SPAN><SPAN class=p>;</SPAN>

                <SPAN class=n>Allocator</SPAN><SPAN class=p>(</SPAN><SPAN class=n>size_t</SPAN> <SPAN class=n>data_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>size_t</SPAN> <SPAN class=n>page_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>size_t</SPAN> <SPAN class=n>alignment</SPAN><SPAN class=p>);</SPAN>
                <SPAN class=o style="FONT-WEIGHT: 600">~</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=p>();</SPAN>

                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// resets the allocator to a new configuration
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">Reset</SPAN><SPAN class=p>(</SPAN><SPAN class=n>size_t</SPAN> <SPAN class=n>data_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>size_t</SPAN> <SPAN class=n>page_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>size_t</SPAN> <SPAN class=n>alignment</SPAN><SPAN class=p>);</SPAN>

                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// alloc and free blocks
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">Allocate</SPAN><SPAN class=p>();</SPAN>
                <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN>  <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">Free</SPAN><SPAN class=p>(</SPAN><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>p</SPAN><SPAN class=p>);</SPAN>
                <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN>  <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">FreeAll</SPAN><SPAN class=p>();</SPAN>
        <SPAN class=k style="FONT-WEIGHT: 600">private</SPAN><SPAN class=o style="FONT-WEIGHT: 600">:</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#if defined(_DEBUG)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// fill a free page with debug patterns
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=n>FillFreePage</SPAN><SPAN class=p>(</SPAN><SPAN class=n>PageHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pPage</SPAN><SPAN class=p>);</SPAN>

                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// fill a block with debug patterns
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">FillFreeBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pBlock</SPAN><SPAN class=p>);</SPAN>

                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// fill an allocated block with debug patterns
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">FillAllocatedBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pBlock</SPAN><SPAN class=p>);</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#endif
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// gets the next block
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">NextBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pBlock</SPAN><SPAN class=p>);</SPAN>

                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// the page list
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=n>PageHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>m_pPageList</SPAN><SPAN class=p>;</SPAN>

                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// the free block list
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>m_pFreeList</SPAN><SPAN class=p>;</SPAN>

                <SPAN class=n>size_t</SPAN>      <SPAN class=n>m_szDataSize</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>size_t</SPAN>      <SPAN class=n>m_szPageSize</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>size_t</SPAN>      <SPAN class=n>m_szAlignmentSize</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>size_t</SPAN>      <SPAN class=n>m_szBlockSize</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>uint32_t</SPAN>    <SPAN class=n>m_nBlocksPerPage</SPAN><SPAN class=p>;</SPAN>

                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// statistics
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=n>uint32_t</SPAN>    <SPAN class=n>m_nPages</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>uint32_t</SPAN>    <SPAN class=n>m_nBlocks</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>uint32_t</SPAN>    <SPAN class=n>m_nFreeBlocks</SPAN><SPAN class=p>;</SPAN>

                <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// disable copy &amp; assignment
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>                <SPAN class=n>Allocator</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=n>clone</SPAN><SPAN class=p>);</SPAN>
                <SPAN class=n>Allocator</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=k style="FONT-WEIGHT: 600">operator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">=</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>Allocator</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>rhs</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=p>};</SPAN>
<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>上面的代码相对于<A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=http%3A//allenchou.net/2013/05/memory-management-part-1-of-3-the-allocator/" 
rel="nofollow noreferrer" target=_blank 
data-za-detail-view-id="1043">参考引用4</A>的改动主要是下面几个方面：</P>
<OL 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; DISPLAY: table; LETTER-SPACING: normal; COUNTER-RESET: ol 0; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>
  <LI 
  style="LIST-STYLE-TYPE: none; DISPLAY: table-row">根据我们引擎整体的命名风格调整了变量的名字</LI>
  <LI 
  style="LIST-STYLE-TYPE: none; DISPLAY: table-row">使用更为明确的数据类型，比如uint32_t，以及移植性更好的数据类型，如size_t</LI>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row">添加了必须且跨平台的C++标准头文件</LI>
  <LI 
  style="LIST-STYLE-TYPE: none; DISPLAY: table-row">使用预编译指令将用于调试的代码标出，只在调试版本当中编译这些代码</LI></OL>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>Allocator.cpp</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>"Allocator.hpp"</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>&lt;cassert&gt;</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>&lt;cstring&gt;</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#ifndef ALIGN
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#define ALIGN(x, a)         (((x) + ((a) - 1)) &amp; ~((a) - 1))
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#endif
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
<SPAN class=k style="FONT-WEIGHT: 600">using</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">namespace</SPAN> <SPAN class=n>My</SPAN><SPAN class=p>;</SPAN>

<SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=p>(</SPAN><SPAN class=n>size_t</SPAN> <SPAN class=n>data_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>size_t</SPAN> <SPAN class=n>page_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>size_t</SPAN> <SPAN class=n>alignment</SPAN><SPAN class=p>)</SPAN>
        <SPAN class=o style="FONT-WEIGHT: 600">:</SPAN> <SPAN class=n>m_pPageList</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>),</SPAN> <SPAN class=n>m_pFreeList</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=n>Reset</SPAN><SPAN class=p>(</SPAN><SPAN class=n>data_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>page_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>alignment</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::~</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=p>()</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=n>FreeAll</SPAN><SPAN class=p>();</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Reset</SPAN><SPAN class=p>(</SPAN><SPAN class=n>size_t</SPAN> <SPAN class=n>data_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>size_t</SPAN> <SPAN class=n>page_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>size_t</SPAN> <SPAN class=n>alignment</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=n>FreeAll</SPAN><SPAN class=p>();</SPAN>

    <SPAN class=n>m_szDataSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>data_size</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>m_szPageSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>page_size</SPAN><SPAN class=p>;</SPAN>

    <SPAN class=n>size_t</SPAN> <SPAN class=n>minimal_size</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">sizeof</SPAN><SPAN class=p>(</SPAN><SPAN class=n>BlockHeader</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN> <SPAN class=n>m_szDataSize</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">?</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">sizeof</SPAN><SPAN class=p>(</SPAN><SPAN class=n>BlockHeader</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">:</SPAN> <SPAN class=n>m_szDataSize</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// this magic only works when alignment is 2^n, which should general be the case
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// because most CPU/GPU also requires the aligment be in 2^n
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// but still we use a assert to guarantee it
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#if defined(_DEBUG)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>    <SPAN class=n>assert</SPAN><SPAN class=p>(</SPAN><SPAN class=n>alignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;&amp;</SPAN> <SPAN class=p>((</SPAN><SPAN class=n>alignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>alignment</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>)))</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">==</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>);</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#endif
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>    <SPAN class=n>m_szBlockSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>ALIGN</SPAN><SPAN class=p>(</SPAN><SPAN class=n>minimal_size</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>alignment</SPAN><SPAN class=p>);</SPAN>

    <SPAN class=n>m_szAlignmentSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_szBlockSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=n>minimal_size</SPAN><SPAN class=p>;</SPAN>

    <SPAN class=n>m_nBlocksPerPage</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>m_szPageSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">sizeof</SPAN><SPAN class=p>(</SPAN><SPAN class=n>PageHeader</SPAN><SPAN class=p>))</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">/</SPAN> <SPAN class=n>m_szBlockSize</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocate</SPAN><SPAN class=p>()</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=o style="FONT-WEIGHT: 600">!</SPAN><SPAN class=n>m_pFreeList</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
        <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// allocate a new page
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=n>PageHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pNewPage</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>PageHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">new</SPAN> <SPAN class=n>uint8_t</SPAN><SPAN class=p>[</SPAN><SPAN class=n>m_szPageSize</SPAN><SPAN class=p>]);</SPAN>
        <SPAN class=o style="FONT-WEIGHT: 600">++</SPAN><SPAN class=n>m_nPages</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>m_nBlocks</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+=</SPAN> <SPAN class=n>m_nBlocksPerPage</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>m_nFreeBlocks</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+=</SPAN> <SPAN class=n>m_nBlocksPerPage</SPAN><SPAN class=p>;</SPAN>

<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#if defined(_DEBUG)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>        <SPAN class=n>FillFreePage</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pNewPage</SPAN><SPAN class=p>);</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#endif
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
        <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>m_pPageList</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
            <SPAN class=n>pNewPage</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>pNext</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_pPageList</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=p>}</SPAN>

        <SPAN class=n>m_pPageList</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pNewPage</SPAN><SPAN class=p>;</SPAN>

        <SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pBlock</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pNewPage</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Blocks</SPAN><SPAN class=p>();</SPAN>
        <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// link each block in the page
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>        <SPAN class=k style="FONT-WEIGHT: 600">for</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>uint32_t</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN> <SPAN class=n>m_nBlocksPerPage</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>i</SPAN><SPAN class=o style="FONT-WEIGHT: 600">++</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
            <SPAN class=n>pBlock</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>pNext</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>NextBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>);</SPAN>
            <SPAN class=n>pBlock</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>NextBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=p>}</SPAN>
        <SPAN class=n>pBlock</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>pNext</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>;</SPAN>

        <SPAN class=n>m_pFreeList</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pNewPage</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Blocks</SPAN><SPAN class=p>();</SPAN>
    <SPAN class=p>}</SPAN>

    <SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>freeBlock</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_pFreeList</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>m_pFreeList</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_pFreeList</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>pNext</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=o style="FONT-WEIGHT: 600">--</SPAN><SPAN class=n>m_nFreeBlocks</SPAN><SPAN class=p>;</SPAN>

<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#if defined(_DEBUG)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>    <SPAN class=n>FillAllocatedBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>freeBlock</SPAN><SPAN class=p>);</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#endif
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">return</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>freeBlock</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Free</SPAN><SPAN class=p>(</SPAN><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>p</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>block</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>p</SPAN><SPAN class=p>);</SPAN>

<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#if defined(_DEBUG)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>    <SPAN class=n>FillFreeBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>block</SPAN><SPAN class=p>);</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#endif
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
    <SPAN class=n>block</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>pNext</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_pFreeList</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>m_pFreeList</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>block</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=o style="FONT-WEIGHT: 600">++</SPAN><SPAN class=n>m_nFreeBlocks</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>FreeAll</SPAN><SPAN class=p>()</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=n>PageHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pPage</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>m_pPageList</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">while</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pPage</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
        <SPAN class=n>PageHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>_p</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pPage</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>pPage</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pPage</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>pNext</SPAN><SPAN class=p>;</SPAN>

        <SPAN class=k style="FONT-WEIGHT: 600">delete</SPAN><SPAN class=p>[]</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>_p</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=p>}</SPAN>

    <SPAN class=n>m_pPageList</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>m_pFreeList</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>;</SPAN>

    <SPAN class=n>m_nPages</SPAN>        <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>m_nBlocks</SPAN>       <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>m_nFreeBlocks</SPAN>   <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#if defined(_DEBUG)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>FillFreePage</SPAN><SPAN class=p>(</SPAN><SPAN class=n>PageHeader</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=n>pPage</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// page header
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>pPage</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>pNext</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>;</SPAN>
 
    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// blocks
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>BlockHeader</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=n>pBlock</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pPage</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Blocks</SPAN><SPAN class=p>();</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">for</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>uint32_t</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN> <SPAN class=n>m_nBlocksPerPage</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>i</SPAN><SPAN class=o style="FONT-WEIGHT: 600">++</SPAN><SPAN class=p>)</SPAN>
    <SPAN class=p>{</SPAN>
        <SPAN class=n>FillFreeBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=n>pBlock</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>NextBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=p>}</SPAN>
<SPAN class=p>}</SPAN>
 
<SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>FillFreeBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>BlockHeader</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// block header + data
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>memset</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>PATTERN_FREE</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>m_szBlockSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=n>m_szAlignmentSize</SPAN><SPAN class=p>);</SPAN>
 
    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// alignment
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>memset</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>m_szBlockSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=n>m_szAlignmentSize</SPAN><SPAN class=p>,</SPAN> 
                <SPAN class=n>PATTERN_ALIGN</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>m_szAlignmentSize</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>
 
<SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">void</SPAN> <SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>FillAllocatedBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>BlockHeader</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// block header + data
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>memset</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>PATTERN_ALLOC</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>m_szBlockSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=n>m_szAlignmentSize</SPAN><SPAN class=p>);</SPAN>
 
    <SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic">// alignment
</SPAN><SPAN class=c1 style="COLOR: rgb(153,153,153); FONT-STYLE: italic"></SPAN>    <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>memset</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>m_szBlockSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=n>m_szAlignmentSize</SPAN><SPAN class=p>,</SPAN> 
                <SPAN class=n>PATTERN_ALIGN</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>m_szAlignmentSize</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#endif
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN><SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>BlockHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>My</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>Allocator</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>NextBlock</SPAN><SPAN class=p>(</SPAN><SPAN class=n>BlockHeader</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">return</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>BlockHeader</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pBlock</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>m_szBlockSize</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>

</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>上面的代码相对于<A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=http%3A//allenchou.net/2013/05/memory-management-part-1-of-3-the-allocator/" 
rel="nofollow noreferrer" target=_blank 
data-za-detail-view-id="1043">参考引用4</A>的改动主要是下面几个方面：</P>
<OL 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; DISPLAY: table; LETTER-SPACING: normal; COUNTER-RESET: ol 0; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row">反映了头文件当中的变化</LI>
  <LI 
  style="LIST-STYLE-TYPE: none; DISPLAY: table-row">使用了更为高效的对齐计算算法（有前提条件，具体见代码注释）</LI></OL>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>好了。接下来我们修改我们的CMakeLists.txt，加入新文件</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-text style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>C:\Users\Tim.AzureAD\Source\Repos\GameEngineFromScratch&gt;gvim Framework\Common\CMakeLists.txt</CODE></PRE></DIV>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-text style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>add_library(Common
Allocator.cpp
BaseApplication.cpp
GraphicsManager.cpp
main.cpp
)</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>然后我们就可以尝试编译看看，是否可以通过。具体的编译过程在<A 
class=internal 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://zhuanlan.zhihu.com/p/28619982" 
data-za-detail-view-id="1043">文章5</A>已经详细叙述过了，这里就不赘述。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>但是事实上我们会需要不止一种的Memory 
Allocator。因为我们的程序当中会使用的对象有着不同的尺寸，我们无法使用一种固定的Block Size来满足各种各样的分配尺寸需求。因为如果Block 
Size过小，显然无法满足需要；如果过大，则是浪费。<A class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=http%3A//allenchou.net/2013/05/memory-management-part-2-of-3-c-style-interface/" 
rel="nofollow noreferrer" target=_blank 
data-za-detail-view-id="1043">参考引用5</A>当中也谈到了这一点。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>此外，我们某些buffer是给CPU使用，有些是给GPU使用，有些是给两者使用。有些只需要高速地读，比如贴图；有些需要高速的写，比如Rendering 
Target；有些则需要保证同步，比如Fence。我们需要实现这些控制。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>并且，如上一篇所述，我们的各个模块将采用一种异步并行的方式执行各自的任务。近代CPU都是多核的，我们需要充分地利用这个特性，就需要多线程。但是目前我们的Allocator还不是线程安全的。线程安全的代码需要一种排他锁定的机制，但是这种机制又往往是低效和容易带来死锁问题的。我们需要平衡这些问题。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>我们将在后文继续讨论这些问题并改善我们的内存管理代码。</P>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B 
style="FONT-WEIGHT: 600">参考引用</B></P>
<OL 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; DISPLAY: table; LETTER-SPACING: normal; COUNTER-RESET: ol 0; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A 
  class=" wrap external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=https%3A//www.gamasutra.com/blogs/MichaelKissner/20151104/258271/Writing_a_Game_Engine_from_Scratch__Part_2_Memory.php" 
  rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">Writing 
  a Game Engine from Scratch - Part 2: Memory</A></LI>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A 
  class=" wrap external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=http%3A//igoro.com/archive/gallery-of-processor-cache-effects/" 
  rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">Gallery 
  of Processor Cache Effects</A></LI>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A 
  class=" wrap external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=http%3A//gameenginebook.com/toc.html" 
  rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">Game 
  Engine Architecture</A></LI>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A 
  class=" wrap external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=http%3A//allenchou.net/2013/05/memory-management-part-1-of-3-the-allocator/" 
  rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">Memory 
  Management part 1 of 3: The Allocator | Ming-Lun "Allen" Chou</A></LI>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A 
  class=" wrap external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=http%3A//allenchou.net/2013/05/memory-management-part-2-of-3-c-style-interface/" 
  rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">Memory 
  Management part 2 of 3: C-Style Interface | Ming-Lun "Allen" 
Chou</A></LI></OL><FIGURE 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><IMG 
class="content_image lazy" 
style="MAX-WIDTH: 100%; MARGIN: 0px auto; DISPLAY: block" 
src="https://pic2.zhimg.com/80/v2-229daa2bfc2444f20a57a2deabf6522d_hd.png" 
width=88 
data-actualsrc="https://pic2.zhimg.com/v2-229daa2bfc2444f20a57a2deabf6522d_b.png" 
data-rawheight="31" data-rawwidth="88"></FIGURE>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>本作品采用<A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=http%3A//creativecommons.org/licenses/by/4.0/" 
rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">知识共享署名 4.0 
国际许可协议</A>进行许可。</P></body>
</html>
