<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>从零开始手敲次世代游戏引擎（二十六）</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 11pt;
}
</style>

</head>

<body>
<P>
<EM>
<A href="https://zhuanlan.zhihu.com/p/29803502" target=_blank >原文链接</A>

</EM>
</P>
<P >
<EM >
  (未修改原文）</EM></P>

<P>
<EM>正文开始：</EM></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 0px 0px 1.4em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>接上一篇，我们来设计编写解析各种资源所需要的文件格式解析器。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>游戏总的来说属于交互式多媒体，游戏引擎的runtime实际上也可以被看做一个多媒体播放器。通常情况下，游戏当中所包含的媒体文件可以大致划分为如下几个类型∶</P>
<OL 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; DISPLAY: table; LETTER-SPACING: normal; COUNTER-RESET: ol 0; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>
  <LI 
  style="LIST-STYLE-TYPE: none; DISPLAY: table-row">静态图片（Image）。在一个2D的游戏当中，静态图片是构成游戏画面的主要媒体内容。在3D游戏当中，静态图片则往往被作为贴图使用。历史上静态图片发展出了很多种格式（参考引用1），大部分格式的出现是为了实现图片的设备（或者应用）无关性和存储（或者网络传输）尺寸的问题，相对的，在图片的加载速度方面作出了一定的牺牲。因此，在大多数当代的游戏引擎当中，大都采用平台专有的格式对图片进行存储，而不是采用（参考引用1）当中的这些通用格式。然而，由于图片素材大多来自于美术的DCC制作工具，因此游戏引擎runtime，或者是游戏引擎的资源导入工具需要支持至少一种通用格式；</LI>
  <LI 
  style="LIST-STYLE-TYPE: none; DISPLAY: table-row">动态图像，也称为视频。这类素材的典型应用是游戏的过场动画，也有作为贴图进行应用的时候。比如在游戏场景当中包括一个播放节目的电子广告屏或者电视，那么其贴图就很可能是一个视频。当用作贴图时，在游戏引擎的runtime当中，由于其自身是以一定的fps刷新画面的，所以视频是被视为一系列按描绘顺序排列的静止图片，在每一帧当中绘制过程与静止图片并没有什么差别；而当作为过场动画进行播放的时候，因为还需要同步处理音频数据，往往是将渲染缓冲区直接临时托管给视频播放器进行画面的输出；</LI>
  <LI 
  style="LIST-STYLE-TYPE: none; DISPLAY: table-row">音频文件。最为基本的是LPCM，也就是wave文件。这个文件当中包括了声音信号经过A/D采样转换之后的样本数据。其它的音频文件格式基本上就是对于这个样本的不同压缩算法。音频的播放一般比较独立，在一个专门的模块当中进行处理。在硬件层面也往往是一个独立的模块。当今大多数设备都能在休眠模式或者极低功耗的情况下播放音乐，就是因为音频处理有单独的硬件完成。也因为比较独立，这部分主要的挑战是对于播放时间点的掌握，如何与画面以及用户输入保持精准的同步。这里面需要考虑到其它处理带来的额外压力所造成的延时。比如我们在玩很多游戏的时候，当游戏处于加载画面的时候往往会出现声音不连续的情况，这就是因为大量的资源加载挤占了硬盘的读取队列，或者是因为相关线程被同步文件I/O暂时卡死了所导致的。</LI>
  <LI 
  style="LIST-STYLE-TYPE: none; DISPLAY: table-row">3D场景文件。这里所说的3D场景文件包括我们在<A 
  class=internal 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://zhuanlan.zhihu.com/p/29723169" 
  data-za-detail-view-id="1043">文章二十四</A>当中提到的场景地图以及场景物体和场景物体的组织结构，还包括挂载在场景物体上的各种组件。这部分相对上面来说是最没有得到标准化的部分。市面上大多数商业游戏引擎都使用了自己专有的格式，而DCC工具在这一部分也是使用着五花八门的格式。因此这部分需要我们编写相当程度的代码去进行各种格式的转换和导入。</LI></OL>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>在<A 
class=internal 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://zhuanlan.zhihu.com/p/29803502" 
data-za-detail-view-id="1043">文章二十五</A>当中我们实现了文件的基本I/O。在将文件读取进内存之后，我们需要根据其格式规范对其进行解析，把其中我们感兴趣的数据提取出来并在内存上以一种方便我们引擎使用的方式进行展开。在这里我们会用到我们之前编写的内存管理模块，也会用到我们之前编写的数学库。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>首先作为演示，让我们来写一个BMP文件的解析器。BMP文件的格式规范请参考（参考引用2）。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>首先，我们需要在Framework/Common下面新建一个Image.hpp文件，在其中定义适用于我们的引擎的静止图片在内存上的结构：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#pragma once
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>"geommath.hpp"</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
<SPAN class=k style="FONT-WEIGHT: 600">namespace</SPAN> <SPAN class=n>My</SPAN> <SPAN class=p>{</SPAN>

    <SPAN class=k style="FONT-WEIGHT: 600">typedef</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">struct</SPAN> <SPAN class=n>_Image</SPAN> <SPAN class=p>{</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>Width</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>Height</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>R8G8B8A8Unorm</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>data</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>bitcount</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>pitch</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>size_t</SPAN>  <SPAN class=n>data_size</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=p>}</SPAN> <SPAN class=n>Image</SPAN><SPAN class=p>;</SPAN>

<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>注意我们包含了geommath.hpp这个之前我们写的数学库，并使用其中的R8G8B8A8Unorm类型来保存静止图片当中的像素颜色数据。R8G8B8A8Unorm这个类型在<A 
class=internal 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://zhuanlan.zhihu.com/p/29618817" 
data-za-detail-view-id="1043">文章二十三</A>当中并没有出现。它是我在写这篇文章的时候新加入到geommath.hpp当中的，定义如下：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'> <SPAN class=k style="FONT-WEIGHT: 600">typedef</SPAN> <SPAN class=n>Vector4Type</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&gt;</SPAN> <SPAN class=n>R8G8B8A8Unorm</SPAN><SPAN class=p>;</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>可以看到它就是一个数据类型为uint8_t的Vector4Type（4维向量）。unorm的意思是Unsigned 
Normalized 
Integer（参考引用3），而R8G8B8A8表示数据包括RGBA四个颜色通道，每个通道是8个bit。它代表了一种在内存当中存储颜色的格式。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>结构体当中的Width指贴图的宽度，而Height指贴图的高度。他们的单位都是像素。bitcount指一个像素在内存上占的尺寸（bit数），而pitch是指图形的一行在内存上的尺寸（byte数）。这两个值与位图本身的质量、在内存上的压缩格式以及内存对齐方式有关。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>data_size则是data所指向的数据区域的尺寸。注意这个尺寸应该是(pitch 
* Height)而不是(Width * Height * 
bitcount/8)，原因就是内存区域有对齐的问题，贴图每行的数据尺寸如果不满足内存对齐的要求在行尾会有padding。这是为了满足GPU寻址方面的要求。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>好了，一个基本的Image结构我们定义好了，接下来我们定义ImageParser这个接口，来抽象化不同图片格式的解析过程：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#pragma once
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>"Interface.hpp"</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>"Image.hpp"</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>"Buffer.hpp"</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
<SPAN class=k style="FONT-WEIGHT: 600">namespace</SPAN> <SPAN class=n>My</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=n>interface</SPAN> <SPAN class=n>ImageParser</SPAN>
    <SPAN class=p>{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">public</SPAN><SPAN class=o style="FONT-WEIGHT: 600">:</SPAN>
        <SPAN class=k style="FONT-WEIGHT: 600">virtual</SPAN> <SPAN class=n>Image</SPAN> <SPAN class=n>Parse</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=n>buf</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=p>};</SPAN>
<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>这个接口很简单，传一个Buffer进去，得到一个Image。唯一需要解释的是，我们的返回值是一个Image类型。也就是说，对于Image的内存分配是在这个接口内完成的。这似乎与我们之前所说的谁分配内存谁释放的原则不符。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>首先，当然，我们可以把这个接口定义为</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=k style="FONT-WEIGHT: 600">virtual</SPAN> <SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">int</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">Parse</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=n>buf</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>Image</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>这样就要求在实际调用Parse之前，先分配好Image对象。但是问题是，在我们实际解析文件内容之前，我们也不知道到底需要为Image的data成员分配多少内存。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>在一些第三方库或者Win32 
API当中，我们有时候会见到这么一种设计：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=kt style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">int</SPAN> <SPAN class=n>size</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>Parse</SPAN><SPAN class=p>(</SPAN><SPAN class=n>buf</SPAN><SPAN class=p>,</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>);</SPAN>
<SPAN class=n>Image</SPAN> <SPAN class=n>Img</SPAN><SPAN class=p>;</SPAN>
<SPAN class=n>Img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>data</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">new</SPAN> <SPAN class=n>uint8_t</SPAN><SPAN class=p>[</SPAN><SPAN class=n>size</SPAN><SPAN class=p>];</SPAN>
<SPAN class=n>Parse</SPAN><SPAN class=p>(</SPAN><SPAN class=n>buf</SPAN><SPAN class=p>,</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN><SPAN class=n>Img</SPAN><SPAN class=p>);</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>就是首先带入nullptr，来告诉函数我们需要知道需要多少内存。函数通过返回值返回所需要的内存大小之后，创建好用于保存数据的对象，再次调用这个函数进行数据填充的操作。这个方法符合谁分配谁释放的原则，但是很不自然，效率也很低。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>之所以出现这种设计，或者说要求遵守谁分配谁释放的原则，是因为截止到C++11之前，C++当中没有显式指定移动语义的方法。除非使用指针进行传递，当我们采用按值返回的时候，对象的拷贝构造函数会被调用。也就是说，如果我们将Parse定义为：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>   <SPAN class=k style="FONT-WEIGHT: 600">virtual</SPAN> <SPAN class=n>Image</SPAN> <SPAN class=nf style="FONT-WEIGHT: 600; COLOR: rgb(241,64,60)">Parse</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=n>buf</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>并且如下进行调用</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=n>Image</SPAN> <SPAN class=n>img</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>Parse</SPAN><SPAN class=p>(</SPAN><SPAN class=n>buf</SPAN><SPAN class=p>);</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>那么从C++语义上，会发生一次对象的生成（等号左边变量，也就是左值分配内存），拷贝（从等号右边拷贝到左边），以及一次对象的析构（内存的释放）。但是从C++11开始，通过定义移动语义的构造函数，可以显式的规避这种拷贝。如下，带一个&amp;的是左值拷贝构造函数和赋值重载，带两个&amp;的是右值拷贝构造函数和赋值重载。在右值的版本当中，我们直接接管相关的buffer而不进行赋值。</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>     <SPAN class=n>Buffer</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
            <SPAN class=n>m_pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pMemoryManager</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Allocate</SPAN><SPAN class=p>(</SPAN><SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN><SPAN class=p>));</SPAN>
            <SPAN class=n>memcpy</SPAN><SPAN class=p>(</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>);</SPAN>
            <SPAN class=n>m_szSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN>  <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>m_szAlignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=p>}</SPAN>

        <SPAN class=n>Buffer</SPAN><SPAN class=p>(</SPAN><SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;&amp;</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
            <SPAN class=n>m_pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>m_szSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>m_szAlignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">4</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=p>}</SPAN>

        <SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">operator</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
            <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>m_szSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;&amp;</SPAN> <SPAN class=n>m_szAlignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">==</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
                <SPAN class=n>memcpy</SPAN><SPAN class=p>(</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>);</SPAN>
            <SPAN class=p>}</SPAN>
            <SPAN class=k style="FONT-WEIGHT: 600">else</SPAN> <SPAN class=p>{</SPAN>
                <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>)</SPAN> <SPAN class=n>g_pMemoryManager</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Free</SPAN><SPAN class=p>(</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>m_szSize</SPAN><SPAN class=p>);</SPAN>
                <SPAN class=n>m_pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pMemoryManager</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Allocate</SPAN><SPAN class=p>(</SPAN><SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN><SPAN class=p>));</SPAN>
                <SPAN class=n>memcpy</SPAN><SPAN class=p>(</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>);</SPAN>
                <SPAN class=n>m_szSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN>  <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>m_szAlignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=p>}</SPAN>
            <SPAN class=k style="FONT-WEIGHT: 600">return</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=k style="FONT-WEIGHT: 600">this</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=p>}</SPAN>

        <SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">operator</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;&amp;</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
            <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>)</SPAN> <SPAN class=n>g_pMemoryManager</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Free</SPAN><SPAN class=p>(</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>m_szSize</SPAN><SPAN class=p>);</SPAN>
            <SPAN class=n>m_pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>m_szSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>m_szAlignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">nullptr</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szSize</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>rhs</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_szAlignment</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">4</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=k style="FONT-WEIGHT: 600">return</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=k style="FONT-WEIGHT: 600">this</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>注意我上面强调了“C++语义上”。因为实际上即使我们不显式地进行这样的指定，当代的大部分C++编译器在对于按值返回的时候会默认地进行类似的优化。但是编译器自动进行的操作有的时候是不那么容易理解或者不见得是我们想要的结果，所以我们通过上面的方法进行显式的指定。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>好了，接下来我们来写BMP文件的解析器。我们在Framework/之下创建一个新目录，名为Codec，然后从ImageParser派生出BmpParser类，来实现对于BMP文件的解析：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#pragma once
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>&lt;iostream&gt;</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#include</SPAN> <SPAN class=cpf>"ImageParser.hpp"</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
<SPAN class=k style="FONT-WEIGHT: 600">namespace</SPAN> <SPAN class=n>My</SPAN> <SPAN class=p>{</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#pragma pack(push, 1)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>    <SPAN class=k style="FONT-WEIGHT: 600">typedef</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">struct</SPAN> <SPAN class=n>_BITMAP_FILEHEADER</SPAN> <SPAN class=p>{</SPAN>
        <SPAN class=n>uint16_t</SPAN> <SPAN class=n>Signature</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>Size</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>Reserved</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>BitsOffset</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=p>}</SPAN> <SPAN class=n>BITMAP_FILEHEADER</SPAN><SPAN class=p>;</SPAN>

<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#define BITMAP_FILEHEADER_SIZE 14
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">typedef</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">struct</SPAN> <SPAN class=n>_BITMAP_HEADER</SPAN> <SPAN class=p>{</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>HeaderSize</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>int32_t</SPAN> <SPAN class=n>Width</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>int32_t</SPAN> <SPAN class=n>Height</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint16_t</SPAN> <SPAN class=n>Planes</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint16_t</SPAN> <SPAN class=n>BitCount</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>Compression</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>SizeImage</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>int32_t</SPAN> <SPAN class=n>PelsPerMeterX</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>int32_t</SPAN> <SPAN class=n>PelsPerMeterY</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>ClrUsed</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>uint32_t</SPAN> <SPAN class=n>ClrImportant</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=p>}</SPAN> <SPAN class=n>BITMAP_HEADER</SPAN><SPAN class=p>;</SPAN>
<SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#pragma pack(pop)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)"></SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">class</SPAN><SPAN class=err style="COLOR: rgb(241,64,60)"> </SPAN><SPAN class=nc style="FONT-WEIGHT: 600; COLOR: rgb(23,81,153)">BmpParser</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">:</SPAN> <SPAN class=n>implements</SPAN> <SPAN class=n>ImageParser</SPAN>
    <SPAN class=p>{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: 600">public</SPAN><SPAN class=o style="FONT-WEIGHT: 600">:</SPAN>
        <SPAN class=k style="FONT-WEIGHT: 600">virtual</SPAN> <SPAN class=n>Image</SPAN> <SPAN class=n>Parse</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: 600">const</SPAN> <SPAN class=n>Buffer</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=n>buf</SPAN><SPAN class=p>)</SPAN>
        <SPAN class=p>{</SPAN>
            <SPAN class=n>Image</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>;</SPAN>
            <SPAN class=n>BITMAP_FILEHEADER</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pFileHeader</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>BITMAP_FILEHEADER</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>buf</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN><SPAN class=p>);</SPAN>
            <SPAN class=n>BITMAP_HEADER</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pBmpHeader</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>BITMAP_HEADER</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>buf</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>BITMAP_FILEHEADER_SIZE</SPAN><SPAN class=p>);</SPAN>
            <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>pFileHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Signature</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">==</SPAN> <SPAN class=mh style="COLOR: rgb(0,132,255)">0x4D42</SPAN> <SPAN class=cm style="COLOR: rgb(153,153,153); FONT-STYLE: italic">/* 'B''M' */</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Asset is Windows BMP file"</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"BMP Header"</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"----------------------------"</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"File Size: "</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>pFileHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Size</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Data Offset: "</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>pFileHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>BitsOffset</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Image Width: "</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>pBmpHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Width</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Image Height: "</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>pBmpHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Height</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Image Planes: "</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>pBmpHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Planes</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Image BitCount: "</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>pBmpHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>BitCount</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Image Compression: "</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>pBmpHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Compression</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Image Size: "</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>pBmpHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>SizeImage</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>

                <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Width</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pBmpHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Width</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Height</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>pBmpHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Height</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>bitcount</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">32</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>pitch</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=p>((</SPAN><SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Width</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>bitcount</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;&gt;</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">3</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">3</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&amp;</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">~</SPAN><SPAN class=mi style="COLOR: rgb(0,132,255)">3</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>data_size</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>pitch</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Height</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>data</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>R8G8B8A8Unorm</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>g_pMemoryManager</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Allocate</SPAN><SPAN class=p>(</SPAN><SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>data_size</SPAN><SPAN class=p>));</SPAN>
                <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>bitcount</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">24</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
                    <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>cout</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=s style="COLOR: rgb(241,64,60)">"Sorry, only true color BMP is supported at now."</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;&lt;</SPAN> <SPAN class=n>std</SPAN><SPAN class=o style="FONT-WEIGHT: 600">::</SPAN><SPAN class=n>endl</SPAN><SPAN class=p>;</SPAN>
                <SPAN class=p>}</SPAN> <SPAN class=k style="FONT-WEIGHT: 600">else</SPAN> <SPAN class=p>{</SPAN>
                    <SPAN class=n>uint8_t</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>pSourceData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>buf</SPAN><SPAN class=p>.</SPAN><SPAN class=n>m_pData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>pFileHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>BitsOffset</SPAN><SPAN class=p>;</SPAN>
                    <SPAN class=k style="FONT-WEIGHT: 600">for</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>int32_t</SPAN> <SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Height</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>y</SPAN><SPAN class=o style="FONT-WEIGHT: 600">--</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
                        <SPAN class=k style="FONT-WEIGHT: 600">for</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>uint32_t</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Width</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>x</SPAN><SPAN class=o style="FONT-WEIGHT: 600">++</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
                            <SPAN class=p>(</SPAN><SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>data</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Width</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Height</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>x</SPAN><SPAN class=p>)</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>bgra</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>R8G8B8A8Unorm</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pSourceData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>pitch</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>im</SPAN>
<SPAN class=n>g</SPAN><SPAN class=p>.</SPAN><SPAN class=n>bitcount</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;&gt;</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">3</SPAN><SPAN class=p>));</SPAN>
                        <SPAN class=p>}</SPAN>
                    <SPAN class=p>}</SPAN>
                <SPAN class=p>}</SPAN>
            <SPAN class=p>}</SPAN>

            <SPAN class=k style="FONT-WEIGHT: 600">return</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=p>}</SPAN>
    <SPAN class=p>};</SPAN>
<SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>代码很简单，但是很容易出问题。因为涉及到很多关于内存顺序和对齐方面的考虑，这是在一些高级语言或者脚本语言编程的时候不太会接触到的。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>我们首先是根据BMP规范（参考引用2）定义了两个结构体，与BMP文件头保持相同的结构。这里需要注意的就是下面这3个预编译命令：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#pragma pack(push, 1)
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#define BITMAP_FILEHEADER_SIZE 14
</SPAN><SPAN class=cp style="FONT-WEIGHT: 600; COLOR: rgb(153,153,153)">#pragma pack(pop)
</SPAN></CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>因为在缺省状态下，C/C++的结构体当中的成员是按照4字节对齐（PC。其它硬件平台可能不同）的。注意我们第一个结构体当中的Signature是uint16_t类型，也就是2个字节。如果我们不指定pack为1，那么下一个Size成员会从第5个字节开始，而不是第3个字节开始。那么我们读取出来的BMP头部数据就会不对。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>同样的，我们定义了 
BITMAP_FILEHEADER_SIZE 
14，而不是使用sizeof(BITMAP_FILEHEADER)，这也是因为结构体会有一个对齐的问题。在PC上，sizeof(BITMAP_FILEHEADER)很可能是16，而不是14。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>其次，请注意下面这行代码：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>      <SPAN class=k style="FONT-WEIGHT: 600">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>pFileHeader</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>Signature</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">==</SPAN> <SPAN class=mh style="COLOR: rgb(0,132,255)">0x4D42</SPAN> <SPAN class=cm style="COLOR: rgb(153,153,153); FONT-STYLE: italic">/* 'B''M' */</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>虽然注释里面写的是'B''M'，但是实际我们比较的值是0x4D42。0x4D是‘M'，而0x42是'B'，正好倒过来。这是因为我们将Signature定义为uint16_t，而x86是little 
endian，当按照字读入的时候，两个字节会发生交换。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>而如果是PS3，那么因为PS3是big 
endian，那么就应该是0x424D了。因为目前我们要支持的平台不包括big endian的机器，所以这个地方就是按照little 
endian来写的。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>第三个需要注意的地方是下面这里：</P>
<DIV class=highlight 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><PRE style="OVERFLOW: auto; WORD-WRAP: normal; FONT-SIZE: 0.9em; BACKGROUND: rgb(246,246,246); WHITE-SPACE: pre; WORD-BREAK: normal; PADDING-BOTTOM: 0.88em; PADDING-TOP: 0.88em; PADDING-LEFT: 0.88em; MARGIN: 0px; PADDING-RIGHT: 0.88em; border-radius: 4px"><CODE class=language-cpp style='FONT-FAMILY: Menlo, Monaco, Consolas, "Andale Mono", "lucida console", "Courier New", monospace; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px; PADDING-RIGHT: 0px; border-radius: 0px'>                 <SPAN class=k style="FONT-WEIGHT: 600">for</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>int32_t</SPAN> <SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Height</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>y</SPAN><SPAN class=o style="FONT-WEIGHT: 600">--</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
                        <SPAN class=k style="FONT-WEIGHT: 600">for</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>uint32_t</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">0</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Width</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>x</SPAN><SPAN class=o style="FONT-WEIGHT: 600">++</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
                            <SPAN class=p>(</SPAN><SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>data</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Width</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>Height</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">-</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">1</SPAN><SPAN class=p>)</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>x</SPAN><SPAN class=p>)</SPAN><SPAN class=o style="FONT-WEIGHT: 600">-&gt;</SPAN><SPAN class=n>bgra</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">=</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN><SPAN class=k style="FONT-WEIGHT: 600">reinterpret_cast</SPAN><SPAN class=o style="FONT-WEIGHT: 600">&lt;</SPAN><SPAN class=n>R8G8B8A8Unorm</SPAN><SPAN class=o style="FONT-WEIGHT: 600">*&gt;</SPAN><SPAN class=p>(</SPAN><SPAN class=n>pSourceData</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>img</SPAN><SPAN class=p>.</SPAN><SPAN class=n>pitch</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=n>y</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">+</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">*</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>im</SPAN>
<SPAN class=n>g</SPAN><SPAN class=p>.</SPAN><SPAN class=n>bitcount</SPAN> <SPAN class=o style="FONT-WEIGHT: 600">&gt;&gt;</SPAN> <SPAN class=mi style="COLOR: rgb(0,132,255)">3</SPAN><SPAN class=p>));</SPAN>
                        <SPAN class=p>}</SPAN>
                    <SPAN class=p>}</SPAN>
</CODE></PRE></DIV>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>这里特别需要注意如何计算像素在两边的位置。BMP文件可能是24bit或者32bit的，需要注意这个差别。（BMP文件历史上还支持24bit以下的，也就是带调色板的格式，这个游戏当中很少用到，为了代码的简洁性我们没有进行支持）</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>另外上面这段代码包括乘法运算，是比较低效的。事实上这段代码完全可以避免乘法运算，并且可以用ispc并列化执行。这部分就放在后面进行吧。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>好了，这样一个简单的BMP解析器就写好了。为了测试代码，我们需要写一个简单的测试应用来显示读入的贴图。我们趁这个机会将在<A 
class=internal 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://zhuanlan.zhihu.com/p/28711014" 
data-za-detail-view-id="1043">文章十</A>的DirectX 
2D的代码整合进来。首先依然是在RHI目录下新建D2d目录，参照之前D3dRHI的方式将D2d的代码作为D2dRHI整合进来，然后在Platform\Windows下新建test目录，在其中创建TextureLoadTest.cpp进行贴图加载的测试。篇幅原因，代码就不在这里贴了，感兴趣的请参考<A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=https%3A//github.com/netwarm007/GameEngineFromScratch/tree/article_26" 
rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">Github 
article_26</A>。</P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>测试应用执行的结果如下，加载的贴图放在项目根目录下的Asset目录当中。我们的AssetLoader会自动查找这个目录。</P><FIGURE 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><IMG 
class="origin_image zh-lightbox-thumb lazy" 
style="CURSOR: zoom-in; MAX-WIDTH: 100%; MARGIN: 0px auto; DISPLAY: block" 
src="https://pic2.zhimg.com/80/v2-f62ee4e5e6e61e5e19c51064a3175b99_hd.jpg" 
width=1010 
data-original="https://pic2.zhimg.com/v2-f62ee4e5e6e61e5e19c51064a3175b99_r.jpg" 
data-actualsrc="https://pic2.zhimg.com/v2-f62ee4e5e6e61e5e19c51064a3175b99_b.jpg" 
data-rawheight="505" data-rawwidth="1010" data-caption=""></FIGURE>
<P class=ztext-empty-paragraph 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: -0.8em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><BR></P>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><B 
style="FONT-WEIGHT: 600">参考引用</B></P>
<OL 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; DISPLAY: table; LETTER-SPACING: normal; COUNTER-RESET: ol 0; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A 
  class=" wrap external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Image_file_formats" 
  rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">Image 
  file formats</A></LI>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A 
  class=" wrap external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/BMP_file_format" 
  rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">BMP file 
  format - Wikipedia</A></LI>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A 
  class=" wrap external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=https%3A//www.khronos.org/opengl/wiki/Normalized_Integer" 
  rel="nofollow noreferrer" target=_blank 
  data-za-detail-view-id="1043">Normalized Integer</A></LI>
  <LI style="LIST-STYLE-TYPE: none; DISPLAY: table-row"><A class=" external" 
  style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
  href="https://link.zhihu.com/?target=https%3A//msdn.microsoft.com/en-us/library/windows/desktop/dd407212%28v%3Dvs.85%29.aspx" 
  rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043"><SPAN 
  class=invisible 
  style="COLOR: transparent; FONT: 0px/0 a; BACKGROUND-COLOR: transparent; font-stretch: normal; text-shadow: none">https://</SPAN><SPAN 
  class=visible>msdn.microsoft.com/en-u</SPAN><SPAN class=invisible 
  style="COLOR: transparent; FONT: 0px/0 a; BACKGROUND-COLOR: transparent; font-stretch: normal; text-shadow: none">s/library/windows/desktop/dd407212(v=vs.85).aspx</SPAN><SPAN 
  class=ellipsis></SPAN></A></LI></OL>
<P 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>本作品采用<A 
class=" wrap external" 
style="CURSOR: pointer; TEXT-DECORATION: none; BORDER-BOTTOM: grey 1px solid; COLOR: " 
href="https://link.zhihu.com/?target=http%3A//creativecommons.org/licenses/by/4.0/" 
rel="nofollow noreferrer" target=_blank data-za-detail-view-id="1043">知识共享署名 4.0 
国际许可协议</A>进行许可。</P><FIGURE 
style='FONT-SIZE: medium; FONT-FAMILY: -apple-system, BlinkMacSystemFont, "Helvetica Neue", "PingFang SC", "Microsoft YaHei", "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(26,26,26); FONT-STYLE: normal; MARGIN: 1.4em 0px 0px; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'><IMG 
class="content_image lazy" 
style="MAX-WIDTH: 100%; MARGIN: 0px auto; DISPLAY: block" 
src="https://pic3.zhimg.com/80/v2-686c91ad59bf097de0baa7e1304a53e6_hd.jpg" 
width=88 
data-actualsrc="https://pic3.zhimg.com/v2-686c91ad59bf097de0baa7e1304a53e6_b.jpg" 
data-rawheight="31" data-rawwidth="88" data-caption=""></body>
</html>
